	.arch armv7-a
	.eabi_attribute 20, 1
	.eabi_attribute 21, 1
	.eabi_attribute 23, 3
	.eabi_attribute 24, 1
	.eabi_attribute 25, 1
	.eabi_attribute 26, 2
	.eabi_attribute 30, 4
	.eabi_attribute 34, 1
	.eabi_attribute 18, 2
	.file	"mpi_dev.c"
	.text
	.syntax unified
	.syntax unified
	.section "__ksymtab_strings","aMS",%progbits,1	
__kstrtab_mpi_node_add_in_watcher:					
	.asciz 	"mpi_node_add_in_watcher"					
__kstrtabns_mpi_node_add_in_watcher:					
	.asciz 	""					
	.previous						

	.section "__ksymtab_strings","aMS",%progbits,1	
__kstrtab_mpi_node_add_in_filter:					
	.asciz 	"mpi_node_add_in_filter"					
__kstrtabns_mpi_node_add_in_filter:					
	.asciz 	""					
	.previous						

	.section "__ksymtab_strings","aMS",%progbits,1	
__kstrtab_mpi_node_add_out_watcher:					
	.asciz 	"mpi_node_add_out_watcher"					
__kstrtabns_mpi_node_add_out_watcher:					
	.asciz 	""					
	.previous						

	.section "__ksymtab_strings","aMS",%progbits,1	
__kstrtab_mpi_node_add_out_filter:					
	.asciz 	"mpi_node_add_out_filter"					
__kstrtabns_mpi_node_add_out_filter:					
	.asciz 	""					
	.previous						

	.section "__ksymtab_strings","aMS",%progbits,1	
__kstrtab_mpi_node_del_in_watcher:					
	.asciz 	"mpi_node_del_in_watcher"					
__kstrtabns_mpi_node_del_in_watcher:					
	.asciz 	""					
	.previous						

	.section "__ksymtab_strings","aMS",%progbits,1	
__kstrtab_mpi_node_del_in_filter:					
	.asciz 	"mpi_node_del_in_filter"					
__kstrtabns_mpi_node_del_in_filter:					
	.asciz 	""					
	.previous						

	.section "__ksymtab_strings","aMS",%progbits,1	
__kstrtab_mpi_node_del_out_watcher:					
	.asciz 	"mpi_node_del_out_watcher"					
__kstrtabns_mpi_node_del_out_watcher:					
	.asciz 	""					
	.previous						

	.section "__ksymtab_strings","aMS",%progbits,1	
__kstrtab_mpi_node_del_out_filter:					
	.asciz 	"mpi_node_del_out_filter"					
__kstrtabns_mpi_node_del_out_filter:					
	.asciz 	""					
	.previous						

	.section "__ksymtab_strings","aMS",%progbits,1	
__kstrtab_mpi_node_enable_auto_streamon:					
	.asciz 	"mpi_node_enable_auto_streamon"					
__kstrtabns_mpi_node_enable_auto_streamon:					
	.asciz 	""					
	.previous						

	.section "__ksymtab_strings","aMS",%progbits,1	
__kstrtab_mpi_node_pick_in_buffer:					
	.asciz 	"mpi_node_pick_in_buffer"					
__kstrtabns_mpi_node_pick_in_buffer:					
	.asciz 	""					
	.previous						

	.section "__ksymtab_strings","aMS",%progbits,1	
__kstrtab_mpi_node_pick_out_buffer:					
	.asciz 	"mpi_node_pick_out_buffer"					
__kstrtabns_mpi_node_pick_out_buffer:					
	.asciz 	""					
	.previous						

	.section "__ksymtab_strings","aMS",%progbits,1	
__kstrtab_mpi_node_release_buffer_flag:					
	.asciz 	"mpi_node_release_buffer_flag"					
__kstrtabns_mpi_node_release_buffer_flag:					
	.asciz 	""					
	.previous						

	.section "__ksymtab_strings","aMS",%progbits,1	
__kstrtab_mpi_node_set_frame_rate:					
	.asciz 	"mpi_node_set_frame_rate"					
__kstrtabns_mpi_node_set_frame_rate:					
	.asciz 	""					
	.previous						

	.section "__ksymtab_strings","aMS",%progbits,1	
__kstrtab_mpi_node_force_lost_frame:					
	.asciz 	"mpi_node_force_lost_frame"					
__kstrtabns_mpi_node_force_lost_frame:					
	.asciz 	""					
	.previous						

	.section "__ksymtab_strings","aMS",%progbits,1	
__kstrtab_mpi_node_streamon:					
	.asciz 	"mpi_node_streamon"					
__kstrtabns_mpi_node_streamon:					
	.asciz 	""					
	.previous						

	.section "__ksymtab_strings","aMS",%progbits,1	
__kstrtab_mpi_node_streamoff:					
	.asciz 	"mpi_node_streamoff"					
__kstrtabns_mpi_node_streamoff:					
	.asciz 	""					
	.previous						

	.section "__ksymtab_strings","aMS",%progbits,1	
__kstrtab_mpi_node_stream_pause:					
	.asciz 	"mpi_node_stream_pause"					
__kstrtabns_mpi_node_stream_pause:					
	.asciz 	""					
	.previous						

	.section "__ksymtab_strings","aMS",%progbits,1	
__kstrtab_mpi_node_buffer_in:					
	.asciz 	"mpi_node_buffer_in"					
__kstrtabns_mpi_node_buffer_in:					
	.asciz 	""					
	.previous						

	.section "__ksymtab_strings","aMS",%progbits,1	
__kstrtab_mpi_node_buffer_out:					
	.asciz 	"mpi_node_buffer_out"					
__kstrtabns_mpi_node_buffer_out:					
	.asciz 	""					
	.previous						

	.section "__ksymtab_strings","aMS",%progbits,1	
__kstrtab_mpi_node_get_in_buffer:					
	.asciz 	"mpi_node_get_in_buffer"					
__kstrtabns_mpi_node_get_in_buffer:					
	.asciz 	""					
	.previous						

	.section "__ksymtab_strings","aMS",%progbits,1	
__kstrtab_mpi_node_get_out_buffer:					
	.asciz 	"mpi_node_get_out_buffer"					
__kstrtabns_mpi_node_get_out_buffer:					
	.asciz 	""					
	.previous						

	.section "__ksymtab_strings","aMS",%progbits,1	
__kstrtab_mpi_node_request_buf:					
	.asciz 	"mpi_node_request_buf"					
__kstrtabns_mpi_node_request_buf:					
	.asciz 	""					
	.previous						

	.section "__ksymtab_strings","aMS",%progbits,1	
__kstrtab_mpi_node_flush:					
	.asciz 	"mpi_node_flush"					
__kstrtabns_mpi_node_flush:					
	.asciz 	""					
	.previous						

	.section "__ksymtab_strings","aMS",%progbits,1	
__kstrtab_mpi_node_unbind:					
	.asciz 	"mpi_node_unbind"					
__kstrtabns_mpi_node_unbind:					
	.asciz 	""					
	.previous						

	.section "__ksymtab_strings","aMS",%progbits,1	
__kstrtab_mpi_node_bind:					
	.asciz 	"mpi_node_bind"					
__kstrtabns_mpi_node_bind:					
	.asciz 	""					
	.previous						

	.section "__ksymtab_strings","aMS",%progbits,1	
__kstrtab_mpi_node_set_params:					
	.asciz 	"mpi_node_set_params"					
__kstrtabns_mpi_node_set_params:					
	.asciz 	""					
	.previous						

	.section "__ksymtab_strings","aMS",%progbits,1	
__kstrtab_mpi_node_destroy:					
	.asciz 	"mpi_node_destroy"					
__kstrtabns_mpi_node_destroy:					
	.asciz 	""					
	.previous						

	.section "__ksymtab_strings","aMS",%progbits,1	
__kstrtab_mpi_dev_create_node_with_params:					
	.asciz 	"mpi_dev_create_node_with_params"					
__kstrtabns_mpi_dev_create_node_with_params:					
	.asciz 	""					
	.previous						

	.section "__ksymtab_strings","aMS",%progbits,1	
__kstrtab_mpi_dev_request_job:					
	.asciz 	"mpi_dev_request_job"					
__kstrtabns_mpi_dev_request_job:					
	.asciz 	""					
	.previous						

	.section "__ksymtab_strings","aMS",%progbits,1	
__kstrtab_mpi_dev_request_job_for_node:					
	.asciz 	"mpi_dev_request_job_for_node"					
__kstrtabns_mpi_dev_request_job_for_node:					
	.asciz 	""					
	.previous						

	.section "__ksymtab_strings","aMS",%progbits,1	
__kstrtab_mpi_dev_run_job:					
	.asciz 	"mpi_dev_run_job"					
__kstrtabns_mpi_dev_run_job:					
	.asciz 	""					
	.previous						

	.section "__ksymtab_strings","aMS",%progbits,1	
__kstrtab_mpi_dev_unregister:					
	.asciz 	"mpi_dev_unregister"					
__kstrtabns_mpi_dev_unregister:					
	.asciz 	""					
	.previous						

	.section "__ksymtab_strings","aMS",%progbits,1	
__kstrtab_mpi_dev_register:					
	.asciz 	"mpi_dev_register"					
__kstrtabns_mpi_dev_register:					
	.asciz 	""					
	.previous						

	.thumb
	.syntax unified
	.align	1
	.global	mpi_node_force_lost_frame
	.syntax unified
	.thumb
	.thumb_func
	.fpu softvfp
	.type	mpi_node_force_lost_frame, %function
mpi_node_force_lost_frame:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	bic	r1, r1, r1, asr #31
	str	r1, [r0]
	movs	r0, #0
	bx	lr
	.fnend
	.size	mpi_node_force_lost_frame, .-mpi_node_force_lost_frame
	.align	1
	.syntax unified
	.thumb
	.thumb_func
	.fpu softvfp
	.type	mpi_node_cleanup_in_buffer, %function
mpi_node_cleanup_in_buffer:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r3, r4, r5, lr}
	.save {r3, r4, r5, lr}
	mov	r4, r0
	cbnz	r1, .L3
	ldr	r3, [r0, #324]
	cbnz	r3, .L2
	ldr	r3, [r0, #328]
	cbnz	r3, .L2
.L3:
	.syntax unified
@ 29 "./arch/arm/include/asm/irqflags.h" 1
		mrs	r5, cpsr	@ arch_local_irq_save
	cpsid	i
@ 0 "" 2
	.thumb
	.syntax unified
	ldr	r0, [r4, #348]
	cbz	r0, .L5
	movs	r1, #0
	bl	mpi_queue_destroy
	movs	r3, #0
	str	r3, [r4, #348]
.L5:
	.syntax unified
@ 171 "./arch/arm/include/asm/irqflags.h" 1
		msr	cpsr_c, r5	@ local_irq_restore
@ 0 "" 2
	.thumb
	.syntax unified
.L2:
	pop	{r3, r4, r5, pc}
	.fnend
	.size	mpi_node_cleanup_in_buffer, .-mpi_node_cleanup_in_buffer
	.align	1
	.syntax unified
	.thumb
	.thumb_func
	.fpu softvfp
	.type	mpi_node_cleanup_out_buffer, %function
mpi_node_cleanup_out_buffer:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r3, r4, r5, lr}
	.save {r3, r4, r5, lr}
	mov	r4, r0
	cbnz	r1, .L10
	ldr	r3, [r0, #336]
	cbnz	r3, .L9
	ldr	r3, [r0, #340]
	cbnz	r3, .L9
.L10:
	.syntax unified
@ 29 "./arch/arm/include/asm/irqflags.h" 1
		mrs	r5, cpsr	@ arch_local_irq_save
	cpsid	i
@ 0 "" 2
	.thumb
	.syntax unified
	ldr	r0, [r4, #352]
	cbz	r0, .L12
	movs	r1, #0
	bl	mpi_queue_destroy
	movs	r3, #0
	str	r3, [r4, #352]
.L12:
	.syntax unified
@ 171 "./arch/arm/include/asm/irqflags.h" 1
		msr	cpsr_c, r5	@ local_irq_restore
@ 0 "" 2
	.thumb
	.syntax unified
.L9:
	pop	{r3, r4, r5, pc}
	.fnend
	.size	mpi_node_cleanup_out_buffer, .-mpi_node_cleanup_out_buffer
	.align	1
	.global	mpi_node_streamon
	.syntax unified
	.thumb
	.thumb_func
	.fpu softvfp
	.type	mpi_node_streamon, %function
mpi_node_streamon:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	.save {r4, r5, r6, lr}
	.pad #16
	mov	r4, r0
	ldr	r3, [r0, #12]
	ldr	r6, [r0, #44]
	tst	r3, #3072
	bne	.L23
	cbz	r0, .L18
	ldr	r3, [r0, #12]
	and	r3, r3, #6
	cmp	r3, #2
	beq	.L19
.L18:
.L23:
	mov	r5, #-1
	b	.L16
.L19:
	bl	mpi_obj_ref
	ldr	r5, [r4, #12]
	ands	r5, r5, #4096
	beq	.L20
.L22:
	movs	r5, #0
.L21:
	mov	r0, r4
	bl	mpi_obj_unref
.L16:
	mov	r0, r5
	add	sp, sp, #16
	@ sp needed
	pop	{r4, r5, r6, pc}
.L20:
	ldr	r3, [r4]
	movs	r1, #4
	ldr	r2, .L30
	mov	r0, r5
	str	r3, [sp, #8]
	ldr	r3, [r4, #44]
	ldr	r3, [r3, #44]
	str	r3, [sp, #4]
	movw	r3, #361
	str	r3, [sp]
	ldr	r3, .L30+4
	bl	vlog
	ldr	r3, [r6, #80]
	cmp	r3, #0
	beq	.L22
	movw	r3, #363
	ldr	r2, .L30+8
	str	r3, [sp]
	movs	r1, #4
	ldr	r3, .L30+4
	mov	r0, r5
	bl	vlog
	mov	r2, r5
	ldr	r3, [r6, #80]
	movs	r1, #5
	mov	r0, r4
	blx	r3
	mov	r5, r0
	cmp	r0, #0
	bne	.L21
	ldr	r3, [r4, #12]
	orr	r3, r3, #4096
	str	r3, [r4, #12]
	b	.L21
.L31:
	.align	2
.L30:
	.word	.LC0
	.word	.LANCHOR0
	.word	.LC1
	.fnend
	.size	mpi_node_streamon, .-mpi_node_streamon
	.align	1
	.global	mpi_node_stream_pause
	.syntax unified
	.thumb
	.thumb_func
	.fpu softvfp
	.type	mpi_node_stream_pause, %function
mpi_node_stream_pause:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, lr}
	.save {r4, lr}
	mov	r4, r0
	cbz	r0, .L33
	ldr	r3, [r0, #12]
	and	r3, r3, #6
	cmp	r3, #2
	beq	.L34
.L33:
	mov	r0, #-1
.L32:
	pop	{r4, pc}
.L34:
.L36:
	bl	mpi_obj_ref
	ldr	r3, [r4, #12]
	mov	r0, r4
	lsls	r2, r3, #19
	itt	mi
	bicmi	r3, r3, #4096
	strmi	r3, [r4, #12]
	bl	mpi_obj_unref
	movs	r0, #0
	b	.L32
	.fnend
	.size	mpi_node_stream_pause, .-mpi_node_stream_pause
	.align	1
	.global	mpi_node_streamoff
	.syntax unified
	.thumb
	.thumb_func
	.fpu softvfp
	.type	mpi_node_streamoff, %function
mpi_node_streamoff:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, r5, lr}
	.save {r4, r5, lr}
	mov	r4, r0
	.pad #20
	sub	sp, sp, #20
	ldr	r5, [r0, #44]
	cbz	r0, .L44
	ldr	r3, [r0, #12]
	and	r3, r3, #6
	cmp	r3, #2
	beq	.L45
.L44:
	mov	r0, #-1
.L43:
	add	sp, sp, #20
	@ sp needed
	pop	{r4, r5, pc}
.L45:
	bl	mpi_obj_ref
	ldr	r3, [r4, #12]
	lsls	r3, r3, #19
	bpl	.L47
	ldr	r3, [r4]
	movs	r1, #5
	ldr	r2, .L68
	movs	r0, #0
	str	r3, [sp, #8]
	ldr	r3, [r4, #44]
	ldr	r3, [r3, #44]
	str	r3, [sp, #4]
	mov	r3, #394
	str	r3, [sp]
	ldr	r3, .L68+4
	bl	vlog
	ldr	r3, [r4, #12]
	bic	r3, r3, #4096
	str	r3, [r4, #12]
	ldr	r3, [r5, #80]
	cbz	r3, .L48
	movs	r2, #0
	movs	r1, #6
	mov	r0, r4
	blx	r3
.L48:
	.syntax unified
@ 29 "./arch/arm/include/asm/irqflags.h" 1
		mrs	r5, cpsr	@ arch_local_irq_save
	cpsid	i
@ 0 "" 2
	.thumb
	.syntax unified
	ldr	r3, [r4, #324]
	cbnz	r3, .L49
.L53:
	ldr	r3, [r4, #336]
	cbnz	r3, .L51
.L50:
	add	r0, r4, #356
	bl	complete_all
	add	r0, r4, #368
	bl	complete_all
	.syntax unified
@ 171 "./arch/arm/include/asm/irqflags.h" 1
		msr	cpsr_c, r5	@ local_irq_restore
@ 0 "" 2
	.thumb
	.syntax unified
.L47:
	mov	r0, r4
	bl	mpi_obj_unref
	movs	r0, #0
	b	.L43
.L52:
	bl	mpi_obj_unref
	ldr	r3, [r4, #396]
	subs	r3, r3, #1
	str	r3, [r4, #396]
.L49:
	ldr	r0, [r4, #348]
	bl	mpi_queue_pop_obj
	cmp	r0, #0
	bne	.L52
	b	.L53
.L54:
	bl	mpi_obj_unref
	ldr	r3, [r4, #400]
	subs	r3, r3, #1
	str	r3, [r4, #400]
.L51:
	ldr	r0, [r4, #352]
	bl	mpi_queue_pop_obj
	cmp	r0, #0
	bne	.L54
	b	.L50
.L69:
	.align	2
.L68:
	.word	.LC2
	.word	.LANCHOR0+18
	.fnend
	.size	mpi_node_streamoff, .-mpi_node_streamoff
	.align	1
	.global	mpi_node_flush
	.syntax unified
	.thumb
	.thumb_func
	.fpu softvfp
	.type	mpi_node_flush, %function
mpi_node_flush:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, r5, r6, r7, lr}
	.save {r4, r5, r6, r7, lr}
	mov	r4, r0
	.pad #20
	sub	sp, sp, #20
	mov	r5, r1
	ldr	r7, [r0, #44]
	.syntax unified
@ 29 "./arch/arm/include/asm/irqflags.h" 1
		mrs	r2, cpsr	@ arch_local_irq_save
	cpsid	i
@ 0 "" 2
	.thumb
	.syntax unified
	ldr	r3, [r0, #12]
	add	r6, r0, #312
	ands	r1, r3, #2048
	beq	.L71
	.syntax unified
@ 171 "./arch/arm/include/asm/irqflags.h" 1
		msr	cpsr_c, r2	@ local_irq_restore
@ 0 "" 2
	.thumb
	.syntax unified
	mov	r0, r6
	bl	wait_for_completion
.L72:
	movs	r0, #0
	add	sp, sp, #20
	@ sp needed
	pop	{r4, r5, r6, r7, pc}
.L71:
	orr	r3, r3, #2048
	str	r1, [r0, #312]
	str	r3, [r0, #12]
	.syntax unified
@ 171 "./arch/arm/include/asm/irqflags.h" 1
		msr	cpsr_c, r2	@ local_irq_restore
@ 0 "" 2
	.thumb
	.syntax unified
	ldr	r3, [r0, #12]
	lsls	r3, r3, #19
	bpl	.L73
	bl	mpi_node_streamoff
.L73:
	ldr	r3, [r4]
	movs	r1, #5
	ldr	r2, .L87
	movs	r0, #0
	str	r3, [sp, #8]
	ldr	r3, [r7, #44]
	str	r3, [sp, #4]
	movw	r3, #775
	str	r3, [sp]
	ldr	r3, .L87+4
	bl	vlog
	ldr	r0, [r4, #308]
	cbz	r0, .L74
	movs	r2, #0
	mov	r1, r5
	bl	mpi_queue_flush
.L74:
	ldr	r3, [r7, #80]
	cbz	r3, .L75
	cbz	r5, .L76
	movs	r2, #0
	movs	r1, #3
.L86:
	mov	r0, r4
	blx	r3
.L75:
	.syntax unified
@ 29 "./arch/arm/include/asm/irqflags.h" 1
		mrs	r5, cpsr	@ arch_local_irq_save
	cpsid	i
@ 0 "" 2
	.thumb
	.syntax unified
	mov	r0, r6
	bl	complete_all
	ldr	r3, [r4, #12]
	bic	r3, r3, #2048
	str	r3, [r4, #12]
	.syntax unified
@ 171 "./arch/arm/include/asm/irqflags.h" 1
		msr	cpsr_c, r5	@ local_irq_restore
@ 0 "" 2
	.thumb
	.syntax unified
	b	.L72
.L76:
	mov	r2, r5
	movs	r1, #2
	b	.L86
.L88:
	.align	2
.L87:
	.word	.LC3
	.word	.LANCHOR0+37
	.fnend
	.size	mpi_node_flush, .-mpi_node_flush
	.align	1
	.global	mpi_node_unbind
	.syntax unified
	.thumb
	.thumb_func
	.fpu softvfp
	.type	mpi_node_unbind, %function
mpi_node_unbind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, r5, lr}
	.save {r4, r5, lr}
	.pad #28
	sub	sp, sp, #28
	ldr	r3, [r1]
	mov	r4, r1
	ldr	r2, .L98
	mov	r5, r0
	str	r3, [sp, #16]
	ldr	r3, [r1, #44]
	movs	r1, #5
	ldr	r3, [r3, #44]
	str	r3, [sp, #12]
	ldr	r3, [r0]
	str	r3, [sp, #8]
	ldr	r3, [r0, #44]
	movs	r0, #0
	ldr	r3, [r3, #44]
	str	r3, [sp, #4]
	movw	r3, #826
	str	r3, [sp]
	ldr	r3, .L98+4
	bl	vlog
	movs	r1, #1
	mov	r0, r4
	bl	mpi_node_flush
	mov	r0, r4
	bl	mpi_node_streamoff
	ldr	r3, [r4, #12]
	lsls	r2, r3, #18
	bpl	.L89
	bic	r3, r3, #8192
	str	r3, [r4, #12]
	ldr	r3, [r4, #44]
	ldr	r3, [r3, #72]
	cbz	r3, .L92
	movs	r1, #0
	ldr	r0, [r4, #288]
	blx	r3
	str	r0, [r4, #288]
.L92:
	mov	r1, r4
	add	r0, r5, #300
	bl	mpi_list_del_obj_rcu
	cbnz	r0, .L93
	mov	r0, r4
	bl	mpi_obj_unref
.L93:
	mov	r1, r5
	add	r0, r4, #292
	bl	mpi_list_del_obj_rcu
	cbnz	r0, .L89
	mov	r0, r5
	add	sp, sp, #28
	@ sp needed
	pop	{r4, r5, lr}
	b	mpi_obj_unref
.L89:
	add	sp, sp, #28
	@ sp needed
	pop	{r4, r5, pc}
.L99:
	.align	2
.L98:
	.word	.LC4
	.word	.LANCHOR0+52
	.fnend
	.size	mpi_node_unbind, .-mpi_node_unbind
	.align	1
	.global	mpi_node_bind
	.syntax unified
	.thumb
	.thumb_func
	.fpu softvfp
	.type	mpi_node_bind, %function
mpi_node_bind:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, r5, r6, lr}
	.save {r4, r5, r6, lr}
	mov	r5, r0
	.pad #24
	sub	sp, sp, #24
	mov	r4, r1
	cbz	r0, .L101
	ldr	r3, [r0, #12]
	and	r3, r3, #6
	cmp	r3, #2
	beq	.L102
.L101:
	mov	r6, #-1
.L100:
	mov	r0, r6
	add	sp, sp, #24
	@ sp needed
	pop	{r4, r5, r6, pc}
.L102:
	bl	mpi_obj_ref
	cbz	r4, .L104
	ldr	r3, [r4, #12]
	and	r3, r3, #6
	cmp	r3, #2
	beq	.L105
.L104:
	mov	r6, #-1
.L106:
	mov	r0, r5
	bl	mpi_obj_unref
	b	.L100
.L105:
	mov	r0, r4
	bl	mpi_obj_ref
	ldr	r3, [r5, #12]
	lsls	r2, r3, #21
	bmi	.L111
	ldr	r3, [r4, #12]
	tst	r3, #9216
	bne	.L111
	mov	r1, r4
	add	r0, r5, #300
	bl	mpi_list_add_tail_obj_rcu
	mov	r0, r5
	bl	mpi_obj_ref
	mov	r1, r5
	add	r0, r4, #292
	bl	mpi_list_add_tail_obj_rcu
	mov	r0, r4
	bl	mpi_obj_ref
	ldr	r3, [r4, #12]
	orr	r3, r3, #8192
	str	r3, [r4, #12]
	ldr	r3, [r4, #44]
	ldr	r3, [r3, #72]
	cbz	r3, .L108
	mov	r1, r5
	ldr	r0, [r4, #288]
	blx	r3
	str	r0, [r4, #288]
.L108:
	ldr	r3, [r4]
	movs	r1, #5
	ldr	r2, .L125
	movs	r0, #0
	str	r3, [sp, #16]
	ldr	r3, [r4, #44]
	ldr	r3, [r3, #44]
	str	r3, [sp, #12]
	ldr	r3, [r5]
	str	r3, [sp, #8]
	ldr	r3, [r5, #44]
	ldr	r3, [r3, #44]
	str	r3, [sp, #4]
	movw	r3, #889
	str	r3, [sp]
	ldr	r3, .L125+4
	bl	vlog
	ldr	r3, [r4, #12]
	lsls	r3, r3, #17
	bpl	.L109
	mov	r0, r4
	bl	mpi_node_streamon
.L109:
	ldr	r6, [r5, #12]
	ands	r6, r6, #16384
	beq	.L107
	mov	r0, r5
	movs	r6, #0
	bl	mpi_node_streamon
.L107:
	mov	r0, r4
	bl	mpi_obj_unref
	b	.L106
.L111:
	mov	r6, #-1
	b	.L107
.L126:
	.align	2
.L125:
	.word	.LC5
	.word	.LANCHOR0+68
	.fnend
	.size	mpi_node_bind, .-mpi_node_bind
	.align	1
	.global	mpi_node_set_params
	.syntax unified
	.thumb
	.thumb_func
	.fpu softvfp
	.type	mpi_node_set_params, %function
mpi_node_set_params:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, r5, r6, lr}
	.save {r4, r5, r6, lr}
	mov	r4, r0
	mov	r6, r1
	cbz	r0, .L128
	ldr	r3, [r0, #12]
	and	r3, r3, #6
	cmp	r3, #2
	beq	.L129
.L128:
	mov	r5, #-1
.L127:
	mov	r0, r5
	pop	{r4, r5, r6, pc}
.L129:
	bl	mpi_obj_ref
	ldr	r3, [r4, #44]
	cbz	r3, .L131
	ldr	r3, [r3, #80]
	cbz	r3, .L131
	mov	r2, r6
	movs	r1, #4
	mov	r0, r4
	blx	r3
	mov	r5, r0
	cbnz	r0, .L131
	ldr	r0, [r4, #80]
	cbz	r0, .L132
	bl	kfree
.L132:
	str	r6, [r4, #80]
.L131:
	mov	r0, r4
	bl	mpi_obj_unref
	b	.L127
	.fnend
	.size	mpi_node_set_params, .-mpi_node_set_params
	.align	1
	.syntax unified
	.thumb
	.thumb_func
	.fpu softvfp
	.type	_mpi_job_discard, %function
_mpi_job_discard:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, lr}
	.save {r4, lr}
	movs	r1, #1
	mov	r4, r0
	bl	mpi_job_cancel
	mov	r0, r4
	pop	{r4, lr}
	b	mpi_obj_unref
	.fnend
	.size	_mpi_job_discard, .-_mpi_job_discard
	.align	1
	.syntax unified
	.thumb
	.thumb_func
	.fpu softvfp
	.type	__init_completion, %function
__init_completion:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	movs	r3, #0
	ldr	r2, .L147
	str	r3, [r0], #4
	ldr	r1, .L147+4
	b	__init_swait_queue_head
.L148:
	.align	2
.L147:
	.word	.LANCHOR1
	.word	.LC6
	.fnend
	.size	__init_completion, .-__init_completion
	.align	1
	.global	mpi_dev_run_job
	.syntax unified
	.thumb
	.thumb_func
	.fpu softvfp
	.type	mpi_dev_run_job, %function
mpi_dev_run_job:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r3, r4, r5, r6, r7, r8, r9, lr}
	.save {r3, r4, r5, r6, r7, r8, r9, lr}
	mov	r8, r0
	mov	r6, r1
	cbz	r0, .L150
	ldr	r3, [r0, #12]
	and	r3, r3, #6
	cmp	r3, #2
	beq	.L151
.L150:
	movs	r4, #0
.L149:
	mov	r0, r4
	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
.L151:
	mov	r9, r0
	movs	r5, #0
	ldr	r4, [r9, #88]!
	subs	r4, r4, #48
.L153:
	add	r3, r4, #48
	cmp	r3, r9
	bne	.L155
	mov	r2, r6
	movs	r1, #0
	ldr	r0, [r8, #84]
	bl	mpi_job_pool_choose_job
	mov	r4, r0
	cbz	r0, .L156
	cbz	r5, .L157
	cbz	r6, .L157
	mov	r1, r5
	blx	r6
	bics	r4, r4, r0, asr #32
	it	cs
	movcs	r4, r5
.L157:
	ldr	r3, [r4, #48]
	cbz	r3, .L190
	ldr	r2, [r3, #12]
	and	r2, r2, #6
	cmp	r2, #2
	beq	.L160
.L190:
	mov	r0, r4
	bl	mpi_job_set_running
	cmp	r0, #0
	bge	.L158
	b	.L163
.L155:
	ldr	r0, [r4, #308]
	cbz	r0, .L154
	bl	mpi_queue_front_obj
	mov	r7, r0
	cbz	r0, .L154
	ldr	r3, [r0, #68]
	cmp	r3, #2
	bne	.L154
	cbz	r5, .L164
	cbz	r6, .L154
	mov	r1, r0
	mov	r0, r5
	blx	r6
	bics	r5, r5, r0, asr #32
	it	cs
	movcs	r5, r7
.L154:
	ldr	r4, [r4, #48]
	subs	r4, r4, #48
	b	.L153
.L164:
	mov	r5, r0
	b	.L154
.L156:
	cbnz	r5, .L165
.L163:
	movs	r4, #0
.L158:
	b	.L149
.L165:
	mov	r4, r5
	b	.L157
.L160:
	ldr	r0, [r3, #308]
	cbz	r0, .L162
	mov	r1, r4
	bl	mpi_queue_try_pop_obj
	cbnz	r0, .L162
	b	.L163
.L162:
	mov	r0, r4
	bl	mpi_obj_unref
	b	.L190
	.fnend
	.size	mpi_dev_run_job, .-mpi_dev_run_job
	.align	1
	.global	mpi_dev_register
	.syntax unified
	.thumb
	.thumb_func
	.fpu softvfp
	.type	mpi_dev_register, %function
mpi_dev_register:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r0, r1, r2, r4, r5, lr}
	.save {r4, r5, lr}
	.pad #12
	add	r3, r0, #88
	mov	r4, r0
	str	r3, [r0, #88]
	str	r3, [r0, #92]
	mov	r5, r1
	mov	r0, r2
	mov	r1, #3264
	bl	kstrdup
	movs	r3, #0
	mov	r1, r3
	orr	r2, r5, #64
	str	r0, [r4, #44]
	mov	r0, r4
	bl	mpi_obj_register
	movs	r1, #10
	mov	r0, r4
	bl	mpi_job_pool_create
	str	r0, [r4, #84]
	cbnz	r0, .L192
	mov	r0, r4
	bl	mpi_obj_unregister
	mov	r0, #-1
.L191:
	add	sp, sp, #12
	@ sp needed
	pop	{r4, r5, pc}
.L192:
	ldr	r3, [r4, #44]
	movs	r1, #5
	ldr	r2, .L194
	movs	r0, #0
	str	r3, [sp, #4]
	movw	r3, #1270
	str	r3, [sp]
	ldr	r3, .L194+4
	bl	vlog
	movs	r0, #0
	b	.L191
.L195:
	.align	2
.L194:
	.word	.LC7
	.word	.LANCHOR0+82
	.fnend
	.size	mpi_dev_register, .-mpi_dev_register
	.align	1
	.syntax unified
	.thumb
	.thumb_func
	.fpu softvfp
	.type	count_frame_rate.part.1, %function
count_frame_rate.part.1:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r3, [r0, #124]
	ldr	r2, [r0, #128]
	adds	r3, r3, #1
	str	r3, [r0, #124]
	push	{r4, lr}
	.save {r4, lr}
	adds	r3, r2, #1
	str	r3, [r0, #128]
	cbz	r1, .L197
	ldr	r3, [r0, #132]
	adds	r3, r3, #1
	str	r3, [r0, #132]
.L197:
	ldr	r1, .L202
	ldr	r4, [r0, #140]
	ldr	r3, [r1]
	rsb	r3, r3, #100
	cmn	r3, r4
	itttt	mi
	ldrmi	r3, [r1]
	strdmi	r2, r3, [r0, #136]
	movmi	r3, #0
	strmi	r3, [r0, #128]
	pop	{r4, pc}
.L203:
	.align	2
.L202:
	.word	jiffies
	.fnend
	.size	count_frame_rate.part.1, .-count_frame_rate.part.1
	.global	__aeabi_idivmod
	.global	__aeabi_uidivmod
	.align	1
	.global	mpi_node_set_frame_rate
	.syntax unified
	.thumb
	.thumb_func
	.fpu softvfp
	.type	mpi_node_set_frame_rate, %function
mpi_node_set_frame_rate:
	.fnstart
	@ args = 0, pretend = 0, frame = 40
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, r5, r6, r7, r8, r9, r10, lr}
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	mov	r5, r2
	ldr	r2, .L235
	.pad #40
	sub	sp, sp, #40
	subs	r7, r1, #0
	mov	r6, r0
	ldr	r4, [r2]
	mov	r8, r2
	str	r4, [sp, #36]
	blt	.L225
	cmp	r0, r7
	blt	.L225
	subs	r2, r0, #1
	cmp	r2, #29
	bhi	.L225
	cbnz	r7, .L206
	add	r6, r6, r5
	movs	r3, #1
.L207:
	strb	r3, [r5], #1
	cmp	r6, r5
	bne	.L207
.L213:
	movs	r0, #0
.L204:
	ldr	r2, [sp, #36]
	ldr	r3, [r8]
	cmp	r2, r3
	beq	.L222
	bl	__stack_chk_fail
.L206:
	str	r0, [r3]
	bl	__aeabi_idivmod
	mov	r9, r0
	mov	r4, r1
	cbnz	r1, .L208
.L209:
	mov	r0, r4
	mov	r1, r9
	bl	__aeabi_idivmod
	adds	r1, r1, #0
	it	ne
	movne	r1, #1
	strb	r1, [r5, r4]
	adds	r4, r4, #1
	cmp	r6, r4
	bne	.L209
	b	.L213
.L208:
	subs	r4, r6, r7
	mov	r0, r6
	mov	r1, r4
	bl	__aeabi_idivmod
	mov	r10, r0
	mov	r9, r1
	cbnz	r1, .L211
.L212:
	mov	r0, r9
	mov	r1, r10
	bl	__aeabi_idivmod
	clz	r1, r1
	lsrs	r1, r1, #5
	strb	r1, [r5, r9]
	add	r9, r9, #1
	cmp	r6, r9
	bne	.L212
	b	.L213
.L211:
	cmp	r6, r7
	ble	.L213
	add	r2, sp, #6
	movs	r3, #0
	mov	r0, r3
	mov	r1, r2
.L215:
	adds	r3, r3, #1
	strb	r0, [r1], #1
	cmp	r7, r3
	bgt	.L215
.L216:
	mov	r1, r2
	movs	r3, #0
.L218:
	adds	r3, r3, #1
	ldrb	r0, [r1]	@ zero_extendqisi2
	cmp	r3, r4
	add	r0, r0, #1
	strb	r0, [r1], #1
	beq	.L217
	cmp	r7, r3
	bgt	.L218
.L217:
	subs	r4, r4, r3
	bne	.L216
	mov	r3, r4
	mov	ip, r4
	mov	lr, #1
.L221:
	ldrb	r0, [r2], #1	@ zero_extendqisi2
	adds	r6, r3, #1
	strb	ip, [r5, r3]
	add	r3, r3, r5
	movs	r1, #0
.L219:
	cmp	r1, r0
	blt	.L220
	adds	r4, r4, #1
	adds	r3, r6, r0
	cmp	r7, r4
	add	r1, r5, r3
	bgt	.L221
	movs	r3, #0
	strb	r3, [r1]
	b	.L213
.L220:
	strb	lr, [r3, #1]!
	adds	r1, r1, #1
	b	.L219
.L225:
	mov	r0, #-1
	b	.L204
.L222:
	add	sp, sp, #40
	@ sp needed
	pop	{r4, r5, r6, r7, r8, r9, r10, pc}
.L236:
	.align	2
.L235:
	.word	__stack_chk_guard
	.fnend
	.size	mpi_node_set_frame_rate, .-mpi_node_set_frame_rate
	.align	1
	.global	mpi_node_add_in_watcher
	.syntax unified
	.thumb
	.thumb_func
	.fpu softvfp
	.type	mpi_node_add_in_watcher, %function
mpi_node_add_in_watcher:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	.save {r4, r5, r6, lr}
	.pad #16
	mov	r4, r0
	mov	r5, r1
	cbz	r0, .L248
	ldr	r3, [r0, #12]
	and	r3, r3, #6
	cmp	r3, #2
	beq	.L239
.L248:
	add	sp, sp, #16
	@ sp needed
	pop	{r4, r5, r6, pc}
.L239:
	str	r1, [sp, #12]
	movs	r1, #5
	ldr	r3, [r0]
	ldr	r2, .L249
	str	r3, [sp, #8]
	ldr	r3, [r0, #44]
	movs	r0, #0
	ldr	r3, [r3, #44]
	str	r3, [sp, #4]
	movs	r3, #199
	str	r3, [sp]
	ldr	r3, .L249+4
	bl	vlog
	.syntax unified
@ 29 "./arch/arm/include/asm/irqflags.h" 1
		mrs	r6, cpsr	@ arch_local_irq_save
	cpsid	i
@ 0 "" 2
	.thumb
	.syntax unified
	ldr	r3, [r4, #324]
	cmp	r5, #0
	add	r3, r3, #1
	str	r3, [r4, #324]
	ble	.L241
	cbz	r3, .L241
	ldr	r2, .L249+8
	movs	r1, #4
	mov	r0, r5
	bl	mpi_queue_create
	movs	r3, #0
	str	r5, [r4, #388]
	str	r3, [r4, #396]
	str	r0, [r4, #348]
.L241:
	.syntax unified
@ 171 "./arch/arm/include/asm/irqflags.h" 1
		msr	cpsr_c, r6	@ local_irq_restore
@ 0 "" 2
	.thumb
	.syntax unified
	b	.L248
.L250:
	.align	2
.L249:
	.word	.LC8
	.word	.LANCHOR0+99
	.word	mpi_obj_unref
	.fnend
	.size	mpi_node_add_in_watcher, .-mpi_node_add_in_watcher
	.align	1
	.global	mpi_node_add_in_filter
	.syntax unified
	.thumb
	.thumb_func
	.fpu softvfp
	.type	mpi_node_add_in_filter, %function
mpi_node_add_in_filter:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	.save {r4, r5, r6, lr}
	.pad #16
	mov	r4, r0
	mov	r5, r1
	cbz	r0, .L262
	ldr	r3, [r0, #12]
	and	r3, r3, #6
	cmp	r3, #2
	beq	.L253
.L262:
	add	sp, sp, #16
	@ sp needed
	pop	{r4, r5, r6, pc}
.L253:
	str	r1, [sp, #12]
	movs	r1, #5
	ldr	r3, [r0]
	ldr	r2, .L263
	str	r3, [sp, #8]
	ldr	r3, [r0, #44]
	movs	r0, #0
	ldr	r3, [r3, #44]
	str	r3, [sp, #4]
	movs	r3, #200
	str	r3, [sp]
	ldr	r3, .L263+4
	bl	vlog
	.syntax unified
@ 29 "./arch/arm/include/asm/irqflags.h" 1
		mrs	r6, cpsr	@ arch_local_irq_save
	cpsid	i
@ 0 "" 2
	.thumb
	.syntax unified
	ldr	r3, [r4, #328]
	cmp	r5, #0
	add	r3, r3, #1
	str	r3, [r4, #328]
	ble	.L255
	ldr	r3, [r4, #324]
	cbz	r3, .L255
	ldr	r2, .L263+8
	movs	r1, #4
	mov	r0, r5
	bl	mpi_queue_create
	movs	r3, #0
	str	r5, [r4, #388]
	str	r3, [r4, #396]
	str	r0, [r4, #348]
.L255:
	.syntax unified
@ 171 "./arch/arm/include/asm/irqflags.h" 1
		msr	cpsr_c, r6	@ local_irq_restore
@ 0 "" 2
	.thumb
	.syntax unified
	b	.L262
.L264:
	.align	2
.L263:
	.word	.LC9
	.word	.LANCHOR0+123
	.word	mpi_obj_unref
	.fnend
	.size	mpi_node_add_in_filter, .-mpi_node_add_in_filter
	.align	1
	.global	mpi_node_add_out_watcher
	.syntax unified
	.thumb
	.thumb_func
	.fpu softvfp
	.type	mpi_node_add_out_watcher, %function
mpi_node_add_out_watcher:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	.save {r4, r5, r6, lr}
	.pad #16
	mov	r4, r0
	mov	r5, r1
	cbz	r0, .L276
	ldr	r3, [r0, #12]
	and	r3, r3, #6
	cmp	r3, #2
	beq	.L267
.L276:
	add	sp, sp, #16
	@ sp needed
	pop	{r4, r5, r6, pc}
.L267:
	str	r1, [sp, #12]
	movs	r1, #5
	ldr	r3, [r0]
	ldr	r2, .L277
	str	r3, [sp, #8]
	ldr	r3, [r0, #44]
	movs	r0, #0
	ldr	r3, [r3, #44]
	str	r3, [sp, #4]
	movs	r3, #201
	str	r3, [sp]
	ldr	r3, .L277+4
	bl	vlog
	.syntax unified
@ 29 "./arch/arm/include/asm/irqflags.h" 1
		mrs	r6, cpsr	@ arch_local_irq_save
	cpsid	i
@ 0 "" 2
	.thumb
	.syntax unified
	ldr	r3, [r4, #336]
	cmp	r5, #0
	add	r3, r3, #1
	str	r3, [r4, #336]
	ble	.L269
	cbz	r3, .L269
	ldr	r2, .L277+8
	movs	r1, #4
	mov	r0, r5
	bl	mpi_queue_create
	movs	r3, #0
	str	r5, [r4, #392]
	str	r3, [r4, #400]
	str	r0, [r4, #352]
.L269:
	.syntax unified
@ 171 "./arch/arm/include/asm/irqflags.h" 1
		msr	cpsr_c, r6	@ local_irq_restore
@ 0 "" 2
	.thumb
	.syntax unified
	b	.L276
.L278:
	.align	2
.L277:
	.word	.LC10
	.word	.LANCHOR0+146
	.word	mpi_obj_unref
	.fnend
	.size	mpi_node_add_out_watcher, .-mpi_node_add_out_watcher
	.align	1
	.global	mpi_node_add_out_filter
	.syntax unified
	.thumb
	.thumb_func
	.fpu softvfp
	.type	mpi_node_add_out_filter, %function
mpi_node_add_out_filter:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	.save {r4, r5, r6, lr}
	.pad #16
	mov	r4, r0
	mov	r5, r1
	cbz	r0, .L290
	ldr	r3, [r0, #12]
	and	r3, r3, #6
	cmp	r3, #2
	beq	.L281
.L290:
	add	sp, sp, #16
	@ sp needed
	pop	{r4, r5, r6, pc}
.L281:
	str	r1, [sp, #12]
	movs	r1, #5
	ldr	r3, [r0]
	ldr	r2, .L291
	str	r3, [sp, #8]
	ldr	r3, [r0, #44]
	movs	r0, #0
	ldr	r3, [r3, #44]
	str	r3, [sp, #4]
	movs	r3, #202
	str	r3, [sp]
	ldr	r3, .L291+4
	bl	vlog
	.syntax unified
@ 29 "./arch/arm/include/asm/irqflags.h" 1
		mrs	r6, cpsr	@ arch_local_irq_save
	cpsid	i
@ 0 "" 2
	.thumb
	.syntax unified
	ldr	r3, [r4, #340]
	cmp	r5, #0
	add	r3, r3, #1
	str	r3, [r4, #340]
	ble	.L283
	ldr	r3, [r4, #336]
	cbz	r3, .L283
	ldr	r2, .L291+8
	movs	r1, #4
	mov	r0, r5
	bl	mpi_queue_create
	movs	r3, #0
	str	r5, [r4, #392]
	str	r3, [r4, #400]
	str	r0, [r4, #352]
.L283:
	.syntax unified
@ 171 "./arch/arm/include/asm/irqflags.h" 1
		msr	cpsr_c, r6	@ local_irq_restore
@ 0 "" 2
	.thumb
	.syntax unified
	b	.L290
.L292:
	.align	2
.L291:
	.word	.LC11
	.word	.LANCHOR0+171
	.word	mpi_obj_unref
	.fnend
	.size	mpi_node_add_out_filter, .-mpi_node_add_out_filter
	.align	1
	.global	mpi_node_del_in_watcher
	.syntax unified
	.thumb
	.thumb_func
	.fpu softvfp
	.type	mpi_node_del_in_watcher, %function
mpi_node_del_in_watcher:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r0, r1, r2, r3, r4, lr}
	.save {r4, lr}
	.pad #16
	mov	r4, r0
	cbz	r0, .L304
	ldr	r3, [r0, #12]
	and	r3, r3, #6
	cmp	r3, #2
	beq	.L295
.L304:
	add	sp, sp, #16
	@ sp needed
	pop	{r4, pc}
.L295:
	ldr	r3, [r0]
	movs	r1, #5
	ldr	r2, .L305
	str	r3, [sp, #8]
	ldr	r3, [r0, #44]
	movs	r0, #0
	ldr	r3, [r3, #44]
	str	r3, [sp, #4]
	movs	r3, #203
	str	r3, [sp]
	ldr	r3, .L305+4
	bl	vlog
	ldr	r3, [r4, #324]
	cbz	r3, .L297
	subs	r3, r3, #1
	str	r3, [r4, #324]
.L297:
	movs	r1, #0
	mov	r0, r4
	bl	mpi_node_cleanup_in_buffer
	b	.L304
.L306:
	.align	2
.L305:
	.word	.LC12
	.word	.LANCHOR0+195
	.fnend
	.size	mpi_node_del_in_watcher, .-mpi_node_del_in_watcher
	.align	1
	.global	mpi_node_del_in_filter
	.syntax unified
	.thumb
	.thumb_func
	.fpu softvfp
	.type	mpi_node_del_in_filter, %function
mpi_node_del_in_filter:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r0, r1, r2, r3, r4, lr}
	.save {r4, lr}
	.pad #16
	mov	r4, r0
	cbz	r0, .L318
	ldr	r3, [r0, #12]
	and	r3, r3, #6
	cmp	r3, #2
	beq	.L309
.L318:
	add	sp, sp, #16
	@ sp needed
	pop	{r4, pc}
.L309:
	ldr	r3, [r0]
	movs	r1, #5
	ldr	r2, .L319
	str	r3, [sp, #8]
	ldr	r3, [r0, #44]
	movs	r0, #0
	ldr	r3, [r3, #44]
	str	r3, [sp, #4]
	movs	r3, #204
	str	r3, [sp]
	ldr	r3, .L319+4
	bl	vlog
	ldr	r3, [r4, #328]
	cbz	r3, .L311
	subs	r3, r3, #1
	str	r3, [r4, #328]
.L311:
	movs	r1, #0
	mov	r0, r4
	bl	mpi_node_cleanup_in_buffer
	b	.L318
.L320:
	.align	2
.L319:
	.word	.LC13
	.word	.LANCHOR0+219
	.fnend
	.size	mpi_node_del_in_filter, .-mpi_node_del_in_filter
	.align	1
	.global	mpi_node_del_out_watcher
	.syntax unified
	.thumb
	.thumb_func
	.fpu softvfp
	.type	mpi_node_del_out_watcher, %function
mpi_node_del_out_watcher:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r0, r1, r2, r3, r4, lr}
	.save {r4, lr}
	.pad #16
	mov	r4, r0
	cbz	r0, .L332
	ldr	r3, [r0, #12]
	and	r3, r3, #6
	cmp	r3, #2
	beq	.L323
.L332:
	add	sp, sp, #16
	@ sp needed
	pop	{r4, pc}
.L323:
	ldr	r3, [r0]
	movs	r1, #5
	ldr	r2, .L333
	str	r3, [sp, #8]
	ldr	r3, [r0, #44]
	movs	r0, #0
	ldr	r3, [r3, #44]
	str	r3, [sp, #4]
	movs	r3, #205
	str	r3, [sp]
	ldr	r3, .L333+4
	bl	vlog
	ldr	r3, [r4, #336]
	cbz	r3, .L325
	subs	r3, r3, #1
	str	r3, [r4, #336]
.L325:
	movs	r1, #0
	mov	r0, r4
	bl	mpi_node_cleanup_out_buffer
	b	.L332
.L334:
	.align	2
.L333:
	.word	.LC14
	.word	.LANCHOR0+242
	.fnend
	.size	mpi_node_del_out_watcher, .-mpi_node_del_out_watcher
	.align	1
	.global	mpi_node_del_out_filter
	.syntax unified
	.thumb
	.thumb_func
	.fpu softvfp
	.type	mpi_node_del_out_filter, %function
mpi_node_del_out_filter:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r0, r1, r2, r3, r4, lr}
	.save {r4, lr}
	.pad #16
	mov	r4, r0
	cbz	r0, .L346
	ldr	r3, [r0, #12]
	and	r3, r3, #6
	cmp	r3, #2
	beq	.L337
.L346:
	add	sp, sp, #16
	@ sp needed
	pop	{r4, pc}
.L337:
	ldr	r3, [r0]
	movs	r1, #5
	ldr	r2, .L347
	str	r3, [sp, #8]
	ldr	r3, [r0, #44]
	movs	r0, #0
	ldr	r3, [r3, #44]
	str	r3, [sp, #4]
	movs	r3, #206
	str	r3, [sp]
	ldr	r3, .L347+4
	bl	vlog
	ldr	r3, [r4, #340]
	cbz	r3, .L339
	subs	r3, r3, #1
	str	r3, [r4, #340]
.L339:
	movs	r1, #0
	mov	r0, r4
	bl	mpi_node_cleanup_out_buffer
	b	.L346
.L348:
	.align	2
.L347:
	.word	.LC15
	.word	.LANCHOR0+267
	.fnend
	.size	mpi_node_del_out_filter, .-mpi_node_del_out_filter
	.align	1
	.global	mpi_node_enable_auto_streamon
	.syntax unified
	.thumb
	.thumb_func
	.fpu softvfp
	.type	mpi_node_enable_auto_streamon, %function
mpi_node_enable_auto_streamon:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r3, [r0, #12]
	cbz	r1, .L350
	orr	r1, r3, #16384
	lsls	r3, r3, #18
	str	r1, [r0, #12]
	bpl	.L349
	b	mpi_node_streamon
.L350:
	bic	r3, r3, #16384
	str	r3, [r0, #12]
.L349:
	bx	lr
	.fnend
	.size	mpi_node_enable_auto_streamon, .-mpi_node_enable_auto_streamon
	.align	1
	.global	mpi_dev_request_job
	.syntax unified
	.thumb
	.thumb_func
	.fpu softvfp
	.type	mpi_dev_request_job, %function
mpi_dev_request_job:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r0, r1, r2, r4, r5, lr}
	.save {r4, r5, lr}
	.pad #12
	mov	r4, r0
	ldr	r3, [r0, #44]
	movs	r1, #5
	ldr	r2, .L366
	movs	r0, #0
	str	r3, [sp, #4]
	mov	r3, #1104
	str	r3, [sp]
	ldr	r3, .L366+4
	bl	vlog
	cbz	r4, .L356
	ldr	r3, [r4, #12]
	and	r3, r3, #6
	cmp	r3, #2
	beq	.L357
.L356:
	movs	r5, #0
.L355:
	mov	r0, r5
	add	sp, sp, #12
	@ sp needed
	pop	{r4, r5, pc}
.L357:
	ldr	r0, [r4, #84]
	bl	mpi_job_pool_request_job
	mov	r5, r0
	cbz	r0, .L359
	mov	r0, r4
	bl	mpi_obj_ref
	str	r4, [r5, #44]
.L359:
	b	.L355
.L367:
	.align	2
.L366:
	.word	.LC16
	.word	.LANCHOR0+291
	.fnend
	.size	mpi_dev_request_job, .-mpi_dev_request_job
	.align	1
	.global	mpi_dev_request_job_for_node
	.syntax unified
	.thumb
	.thumb_func
	.fpu softvfp
	.type	mpi_dev_request_job_for_node, %function
mpi_dev_request_job_for_node:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, r5, lr}
	.save {r4, r5, lr}
	.pad #20
	sub	sp, sp, #20
	ldr	r3, [r1]
	mov	r5, r0
	mov	r4, r1
	ldr	r2, .L379
	movs	r1, #5
	str	r3, [sp, #8]
	ldr	r3, [r0, #44]
	movs	r0, #0
	str	r3, [sp, #4]
	movw	r3, #1130
	str	r3, [sp]
	ldr	r3, .L379+4
	bl	vlog
	cbz	r4, .L369
	ldr	r3, [r4, #12]
	and	r3, r3, #6
	cmp	r3, #2
	beq	.L370
.L369:
	movs	r5, #0
.L368:
	mov	r0, r5
	add	sp, sp, #20
	@ sp needed
	pop	{r4, r5, pc}
.L370:
	mov	r0, r5
	bl	mpi_dev_request_job
	mov	r5, r0
	cbz	r0, .L372
	mov	r0, r4
	bl	mpi_obj_ref
	str	r4, [r5, #48]
.L372:
	b	.L368
.L380:
	.align	2
.L379:
	.word	.LC17
	.word	.LANCHOR0+311
	.fnend
	.size	mpi_dev_request_job_for_node, .-mpi_dev_request_job_for_node
	.align	1
	.syntax unified
	.thumb
	.thumb_func
	.fpu softvfp
	.type	atomic_add.constprop.24, %function
atomic_add.constprop.24:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	pld	[r0]
	.syntax unified
@ 223 "./arch/arm/include/asm/atomic.h" 1
	@ atomic_add
1:	ldrex	r3, [r0]
	add	r3, r3, #1
	strex	r2, r3, [r0]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.thumb
	.syntax unified
	bx	lr
	.fnend
	.size	atomic_add.constprop.24, .-atomic_add.constprop.24
	.align	1
	.global	mpi_node_destroy
	.syntax unified
	.thumb
	.thumb_func
	.fpu softvfp
	.type	mpi_node_destroy, %function
mpi_node_destroy:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, r5, r6, r7, lr}
	.save {r4, r5, r6, r7, lr}
	.pad #20
	sub	sp, sp, #20
	ldr	r3, [r0]
	mov	r4, r0
	ldr	r2, .L428
	movs	r1, #5
	str	r3, [sp, #8]
	ldr	r3, [r0, #44]
	movs	r0, #0
	ldr	r3, [r3, #44]
	str	r3, [sp, #4]
	mov	r3, #952
	str	r3, [sp]
	ldr	r3, .L428+4
	bl	vlog
	.syntax unified
@ 29 "./arch/arm/include/asm/irqflags.h" 1
		mrs	r1, cpsr	@ arch_local_irq_save
	cpsid	i
@ 0 "" 2
	.thumb
	.syntax unified
	ldrd	r2, r3, [r4, #48]
	str	r3, [r2, #4]
	str	r2, [r3]
	mov	r2, #256
	mov	r3, #290
	strd	r2, r3, [r4, #48]
	.syntax unified
@ 171 "./arch/arm/include/asm/irqflags.h" 1
		msr	cpsr_c, r1	@ local_irq_restore
@ 0 "" 2
	.thumb
	.syntax unified
	ldr	r3, [r4, #12]
	movs	r1, #1
	mov	r0, r4
	orr	r3, r3, #1024
	str	r3, [r4, #12]
	bl	mpi_node_flush
	cbz	r4, .L383
	mov	r0, r4
	bl	mpi_obj_ref
.L383:
	ldr	r3, [r4, #12]
	bic	r3, r3, #2
	str	r3, [r4, #12]
	bl	synchronize_rcu
	ldr	r0, [r4, #60]
	cbz	r0, .L384
	mov	r1, r4
	bl	mpi_buf_pool_del_user
.L384:
	add	r6, r4, #292
.L385:
	mov	r0, r6
	bl	mpi_list_pop_obj_rcu
	mov	r5, r0
	cmp	r0, #0
	bne	.L386
	add	r6, r4, #300
.L387:
	mov	r0, r6
	bl	mpi_list_pop_obj_rcu
	mov	r5, r0
	cmp	r0, #0
	bne	.L388
	ldr	r0, [r4, #308]
	cbz	r0, .L389
	mov	r1, r5
	bl	mpi_queue_destroy
.L389:
	.syntax unified
@ 29 "./arch/arm/include/asm/irqflags.h" 1
		mrs	r3, cpsr	@ arch_local_irq_save
	cpsid	i
@ 0 "" 2
	.thumb
	.syntax unified
	ldr	r0, [r4, #288]
	cbz	r0, .L390
	movs	r2, #0
	str	r2, [r4, #288]
.L390:
	.syntax unified
@ 171 "./arch/arm/include/asm/irqflags.h" 1
		msr	cpsr_c, r3	@ local_irq_restore
@ 0 "" 2
	.thumb
	.syntax unified
	cbz	r0, .L391
	ldr	r3, [r4, #44]
	ldr	r3, [r3, #76]
	cbz	r3, .L391
	blx	r3
.L391:
	ldr	r3, [r4, #120]
	cbz	r3, .L392
	mov	r0, r4
	blx	r3
.L392:
	ldr	r1, [r4, #76]
	cmp	r1, #15
	bhi	.L393
	.syntax unified
@ 29 "./arch/arm/include/asm/irqflags.h" 1
		mrs	r5, cpsr	@ arch_local_irq_save
	cpsid	i
@ 0 "" 2
	.thumb
	.syntax unified
	ldr	r2, .L428+8
	mov	r0, #-1
	ldr	r3, [r2]
	subs	r3, r3, #36
.L394:
	add	r1, r3, #36
	cmp	r1, r2
	bne	.L396
	.syntax unified
@ 171 "./arch/arm/include/asm/irqflags.h" 1
		msr	cpsr_c, r5	@ local_irq_restore
@ 0 "" 2
	.thumb
	.syntax unified
.L397:
	ldr	r5, [r4, #24]
	adds	r6, r5, #4
	add	r7, r5, #8
	mov	r0, r5
	bl	atomic_add.constprop.24
	mov	r0, r6
	bl	atomic_add.constprop.24
	ldr	r3, [r4, #16]
	cbnz	r3, .L398
	mov	r0, r7
	bl	complete_all
.L398:
	mov	r0, r4
	pld	[r6]
	bl	mpi_obj_unref
	mov	r0, r7
	bl	wait_for_completion
	.syntax unified
@ 224 "./arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r6]
	sub	r3, r3, #1
	strex	r2, r3, [r6]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.thumb
	.syntax unified
	pld	[r5]
	.syntax unified
@ 224 "./arch/arm/include/asm/atomic.h" 1
	@ atomic_sub_return
1:	ldrex	r3, [r5]
	sub	r3, r3, #1
	strex	r2, r3, [r5]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.thumb
	.syntax unified
	cbnz	r3, .L399
	mov	r0, r5
	bl	kfree
.L399:
	movs	r1, #1
	mov	r0, r4
	bl	mpi_node_cleanup_in_buffer
	mov	r0, r4
	movs	r1, #1
	bl	mpi_node_cleanup_out_buffer
	ldr	r0, [r4, #80]
	cbz	r0, .L400
	bl	kfree
.L400:
	mov	r0, r4
	add	sp, sp, #20
	@ sp needed
	pop	{r4, r5, r6, r7, lr}
	b	mpi_obj_unregister
.L386:
	mov	r1, r4
	bl	mpi_node_unbind
	mov	r0, r5
	bl	mpi_obj_unref
	b	.L385
.L388:
	mov	r0, r4
	mov	r1, r5
	bl	mpi_node_unbind
	mov	r0, r5
	bl	mpi_obj_unref
	b	.L387
.L396:
	ldr	r1, [r4, #76]
	add	r1, r3, r1, lsl #2
	ldr	r6, [r1, #452]
	cbnz	r6, .L395
	str	r0, [r1, #452]
	ldr	r1, [r4, #76]
	add	r1, r3, r1, lsl #2
	str	r0, [r1, #516]
.L395:
	ldr	r3, [r3, #36]
	subs	r3, r3, #36
	b	.L394
.L393:
	adds	r3, r1, #1
	beq	.L397
	ldr	r0, .L428+12
	bl	printk
	b	.L397
.L429:
	.align	2
.L428:
	.word	.LC18
	.word	.LANCHOR0+340
	.word	mpi_buf_list
	.word	.LC19
	.fnend
	.size	mpi_node_destroy, .-mpi_node_destroy
	.align	1
	.syntax unified
	.thumb
	.thumb_func
	.fpu softvfp
	.type	count_frame_rate.constprop.25, %function
count_frame_rate.constprop.25:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r1, .L432
	ldr	r2, [r0, #188]
	ldr	r3, [r0, #184]
	push	{r4, lr}
	.save {r4, lr}
	adds	r3, r3, #1
	str	r3, [r0, #184]
	adds	r3, r2, #1
	str	r3, [r0, #188]
	ldr	r3, [r1]
	ldr	r4, [r0, #200]
	rsb	r3, r3, #100
	cmn	r3, r4
	itttt	mi
	ldrmi	r3, [r1]
	strdmi	r2, r3, [r0, #196]
	movmi	r3, #0
	strmi	r3, [r0, #188]
	pop	{r4, pc}
.L433:
	.align	2
.L432:
	.word	jiffies
	.fnend
	.size	count_frame_rate.constprop.25, .-count_frame_rate.constprop.25
	.align	1
	.global	mpi_dev_create_node_with_params
	.syntax unified
	.thumb
	.thumb_func
	.fpu softvfp
	.type	mpi_dev_create_node_with_params, %function
mpi_dev_create_node_with_params:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, lr}
	.save {r4, r5, r6, r7, r8, r9, r10, lr}
	.pad #16
	mov	r5, r0
	mov	r10, r1
	mov	r9, r2
	mov	r8, r3
	cbz	r0, .L435
	ldr	r7, [r0, #12]
	and	r7, r7, #6
	cmp	r7, #2
	beq	.L436
.L435:
	movs	r4, #0
.L434:
	mov	r0, r4
	add	sp, sp, #16
	@ sp needed
	pop	{r4, r5, r6, r7, r8, r9, r10, pc}
.L436:
	bl	mpi_obj_ref
	ldr	r6, .L458
	mov	r1, #3520
	ldr	r0, [r6, #36]
	bl	kmem_cache_alloc
	mov	r4, r0
	cbz	r0, .L438
	mov	r3, #-1
	str	r3, [r0, #76]
	movs	r3, #0
	strd	r3, r3, [r0, #124]
	strd	r3, r3, [r0, #132]
	strd	r3, r3, [r0, #184]
	strd	r3, r3, [r0, #192]
	ldr	r3, .L458+4
	str	r5, [r0, #44]
	str	r10, [r0, #56]
	ldr	r3, [r3]
	str	r3, [r0, #200]
	str	r3, [r0, #140]
	ldr	r3, .L458+8
	strd	r3, r3, [r0, #380]
	add	r3, r0, #292
	str	r3, [r0, #292]
	str	r3, [r0, #296]
	add	r3, r0, #300
	str	r3, [r0, #300]
	str	r3, [r0, #304]
	cmp	r9, #0
	beq	.L439
	mov	r1, r7
	ldr	r2, .L458+12
	mov	r0, r9
	bl	mpi_queue_create
	mov	r7, r0
	str	r0, [r4, #308]
	cbnz	r0, .L439
	mov	r0, r4
	mov	r4, r7
	bl	kfree
.L438:
	mov	r0, r5
	bl	mpi_obj_unref
	b	.L434
.L439:
	ldr	r0, [r6, #4]
	mov	r1, #3520
	bl	kmem_cache_alloc
	mov	r6, r0
	str	r0, [r4, #80]
	cbnz	r0, .L440
	mov	r0, r4
	mov	r4, r6
	bl	kfree
	b	.L438
.L440:
	add	r0, r4, #312
	bl	__init_completion
	add	r0, r4, #356
	bl	__init_completion
	add	r0, r4, #368
	bl	__init_completion
	movs	r3, #0
	movs	r2, #96
	movs	r1, #1
	mov	r0, r4
	bl	mpi_obj_register
	.syntax unified
@ 29 "./arch/arm/include/asm/irqflags.h" 1
		mrs	r1, cpsr	@ arch_local_irq_save
	cpsid	i
@ 0 "" 2
	.thumb
	.syntax unified
	ldr	r2, [r5, #92]
	add	r3, r4, #48
	add	r0, r5, #88
	str	r3, [r5, #92]
	strd	r0, r2, [r4, #48]
	str	r3, [r2]
	.syntax unified
@ 171 "./arch/arm/include/asm/irqflags.h" 1
		msr	cpsr_c, r1	@ local_irq_restore
@ 0 "" 2
	.thumb
	.syntax unified
	cmp	r8, #0
	beq	.L441
	mov	r1, r8
	mov	r0, r4
	bl	mpi_node_set_params
.L441:
	ldr	r3, [r5, #68]
	cbz	r3, .L442
	mov	r0, r4
	blx	r3
	str	r0, [r4, #288]
.L442:
	ldr	r3, [r4]
	movs	r1, #5
	ldr	r2, .L458+16
	movs	r0, #0
	str	r3, [sp, #8]
	ldr	r3, [r5, #44]
	str	r3, [sp, #4]
	movw	r3, #1086
	str	r3, [sp]
	ldr	r3, .L458+20
	bl	vlog
	b	.L438
.L459:
	.align	2
.L458:
	.word	kmalloc_caches
	.word	jiffies
	.word	500000
	.word	_mpi_job_discard
	.word	.LC20
	.word	.LANCHOR0+357
	.fnend
	.size	mpi_dev_create_node_with_params, .-mpi_dev_create_node_with_params
	.align	1
	.global	mpi_dev_unregister
	.syntax unified
	.thumb
	.thumb_func
	.fpu softvfp
	.type	mpi_dev_unregister, %function
mpi_dev_unregister:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	.save {r4, r5, r6, r7, lr}
	.pad #12
	mov	r5, r0
	ldr	r3, [r0, #44]
	movs	r1, #5
	ldr	r2, .L469
	movs	r0, #0
	str	r3, [sp, #4]
	movw	r3, #1221
	str	r3, [sp]
	ldr	r3, .L469+4
	bl	vlog
	cbz	r5, .L461
	mov	r0, r5
	bl	mpi_obj_ref
.L461:
	ldr	r3, [r5, #12]
	mov	r6, r5
	bic	r3, r3, #2
	str	r3, [r5, #12]
	bl	synchronize_rcu
	ldr	r0, [r6, #88]!
	ldr	r4, [r0], #-48
	subs	r4, r4, #48
.L462:
	add	r3, r0, #48
	cmp	r3, r6
	bne	.L463
	ldr	r0, [r5, #84]
	bl	mpi_job_pool_destroy
	ldr	r4, [r5, #24]
	ldr	r3, [r5, #12]
	adds	r6, r4, #4
	add	r7, r4, #8
	orr	r3, r3, #4
	mov	r0, r4
	str	r3, [r5, #12]
	bl	atomic_add.constprop.24
	mov	r0, r6
	bl	atomic_add.constprop.24
	ldr	r3, [r5, #16]
	cbnz	r3, .L464
	mov	r0, r7
	bl	complete_all
.L464:
	mov	r0, r5
	pld	[r6]
	bl	mpi_obj_unref
	mov	r0, r7
	bl	wait_for_completion
	.syntax unified
@ 224 "./arch/arm/include/asm/atomic.h" 1
	@ atomic_sub
1:	ldrex	r3, [r6]
	sub	r3, r3, #1
	strex	r2, r3, [r6]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.thumb
	.syntax unified
	pld	[r4]
	.syntax unified
@ 224 "./arch/arm/include/asm/atomic.h" 1
	@ atomic_sub_return
1:	ldrex	r3, [r4]
	sub	r3, r3, #1
	strex	r2, r3, [r4]
	teq	r2, #0
	bne	1b
@ 0 "" 2
	.thumb
	.syntax unified
	cbnz	r3, .L465
	mov	r0, r4
	bl	kfree
.L465:
	ldr	r0, [r5, #44]
	bl	kfree
	mov	r0, r5
	bl	mpi_obj_unregister
	movs	r0, #0
	add	sp, sp, #12
	@ sp needed
	pop	{r4, r5, r6, r7, pc}
.L463:
	bl	mpi_node_destroy
	ldr	r3, [r4, #48]
	mov	r0, r4
	sub	r4, r3, #48
	b	.L462
.L470:
	.align	2
.L469:
	.word	.LC21
	.word	.LANCHOR0+389
	.fnend
	.size	mpi_dev_unregister, .-mpi_dev_unregister
	.align	1
	.global	add_user_to_buf
	.syntax unified
	.thumb
	.thumb_func
	.fpu softvfp
	.type	add_user_to_buf, %function
add_user_to_buf:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, r5, lr}
	.save {r4, r5, lr}
	cbz	r1, .L471
	ldr	r3, [r0, #76]
	adds	r3, r3, #1
	bne	.L474
	.syntax unified
@ 29 "./arch/arm/include/asm/irqflags.h" 1
		mrs	r4, cpsr	@ arch_local_irq_save
	cpsid	i
@ 0 "" 2
	.thumb
	.syntax unified
	movs	r3, #0
.L485:
	str	r3, [r0, #76]
	ldr	r3, [r0, #76]
	cmp	r3, #15
	ble	.L477
.L476:
	.syntax unified
@ 171 "./arch/arm/include/asm/irqflags.h" 1
		msr	cpsr_c, r4	@ local_irq_restore
@ 0 "" 2
	.thumb
	.syntax unified
.L474:
	ldr	r3, [r0, #76]
	cmp	r3, #15
	itt	gt
	mvngt	r3, #1
	strgt	r3, [r0, #76]
	ldr	r3, [r0, #76]
	cmp	r3, #0
	blt	.L471
	cmp	r2, #0
	ite	ne
	movne	r2, #16
	moveq	r2, #0
	add	r3, r3, r2
	add	r1, r1, r3, lsl #2
	str	r0, [r1, #452]
.L471:
	pop	{r4, r5, pc}
.L477:
	add	r5, r1, r3, lsl #2
	ldr	r5, [r5, #452]
	adds	r5, r5, #1
	beq	.L476
	adds	r3, r3, #1
	b	.L485
	.fnend
	.size	add_user_to_buf, .-add_user_to_buf
	.align	1
	.global	mpi_node_buffer_in
	.syntax unified
	.thumb
	.thumb_func
	.fpu softvfp
	.type	mpi_node_buffer_in, %function
mpi_node_buffer_in:
	.fnstart
	@ args = 0, pretend = 0, frame = 32
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, r5, r6, r7, lr}
	.save {r4, r5, r6, r7, lr}
	mov	r4, r0
	.pad #60
	sub	sp, sp, #60
	mov	r6, r1
	mov	r7, r2
	cbz	r0, .L487
	ldr	r3, [r0, #12]
	and	r3, r3, #6
	cmp	r3, #2
	beq	.L488
.L487:
	movs	r5, #32
.L486:
	mov	r0, r5
	add	sp, sp, #60
	@ sp needed
	pop	{r4, r5, r6, r7, pc}
.L488:
	adds	r0, r0, #248
	bl	ktime_get_ts64
	mov	r0, r4
	bl	mpi_obj_ref
	ldr	r3, [r4, #12]
	ands	r5, r3, #4096
	beq	.L490
	ldr	r3, [r4, #44]
	ldr	r0, [r6]
	ldr	r1, [r4]
	ldr	r2, [r3, #44]
	ldr	r5, .L527
	ldr	r3, .L527+4
	strd	r2, r1, [sp, #4]
	movs	r1, #5
	cmp	r7, #0
	it	eq
	moveq	r3, r5
	ldr	r2, .L527+8
	strd	r0, r3, [sp, #12]
	movw	r3, #481
	movs	r0, #0
	str	r3, [sp]
	ldr	r3, .L527+12
	bl	vlog
	ldr	r1, [r4, #144]
	cbz	r1, .L492
	ldr	r3, [r4, #148]
	cmp	r3, #0
	ble	.L493
	subs	r3, r3, #1
	str	r3, [r4, #148]
.L494:
	movs	r1, #0
	mov	r0, r4
	bl	count_frame_rate.part.1
	movs	r5, #0
	b	.L490
.L493:
	ldr	r0, [r4, #124]
	bl	__aeabi_idivmod
	add	r1, r1, r4
	ldrb	r3, [r1, #152]	@ zero_extendqisi2
	cmp	r3, #0
	bne	.L494
.L492:
	cmp	r7, #0
	bne	.L507
	ldr	r3, [r4, #324]
	cbnz	r3, .L496
	ldr	r3, [r4, #328]
	cmp	r3, #0
	beq	.L508
.L496:
	.syntax unified
@ 29 "./arch/arm/include/asm/irqflags.h" 1
		mrs	r7, cpsr	@ arch_local_irq_save
	cpsid	i
@ 0 "" 2
	.thumb
	.syntax unified
	ldr	r5, [r4, #324]
	cbz	r5, .L497
	cbz	r6, .L498
	mov	r0, r6
	bl	mpi_obj_ref
.L498:
	ldr	r2, [r4, #396]
	ldr	r3, [r4, #388]
	ldr	r0, [r4, #348]
	cmp	r2, r3
	bcs	.L499
	mov	r1, r6
	bl	mpi_queue_push_obj
	cmp	r0, #0
	beq	.L500
	ldr	r3, [r4, #396]
	movs	r5, #0
	adds	r3, r3, #1
	str	r3, [r4, #396]
.L501:
	add	r0, r4, #356
	bl	complete_all
	.syntax unified
@ 171 "./arch/arm/include/asm/irqflags.h" 1
		msr	cpsr_c, r7	@ local_irq_restore
@ 0 "" 2
	.thumb
	.syntax unified
.L497:
	ldr	r3, [r4, #328]
	cmp	r3, #0
	beq	.L495
	ldr	r3, [r4, #332]
	cbz	r3, .L503
	mov	r1, r6
	mov	r0, r4
	blx	r3
.L503:
	movs	r1, #0
.L504:
	mov	r0, r4
	bl	count_frame_rate.part.1
.L490:
	add	r0, sp, #24
	bl	ktime_get_ts64
	ldr	r1, [r4, #256]
	ldrd	r2, r3, [r4, #248]
	ldr	r0, [sp, #32]
	ldr	r6, [sp, #24]
	subs	r0, r0, r1
	subs	r2, r6, r2
	asr	r1, r0, #31
	strd	r0, [sp]
	ldr	r1, [sp, #28]
	add	r0, sp, #40
	sbc	r3, r1, r3
	bl	set_normalized_timespec64
	ldr	r0, .L527+16
	ldr	r3, [sp, #48]
	ldr	r2, [sp, #40]
	smull	r0, r1, r3, r0
	asrs	r3, r3, #31
	mov	r0, r4
	rsb	r3, r3, r1, asr #6
	ldr	r1, .L527+20
	mla	r3, r1, r2, r3
	str	r3, [r4, #280]
	bl	mpi_obj_unref
	b	.L486
.L500:
	movw	r3, #493
	ldr	r2, .L527+24
	str	r3, [sp]
	movs	r1, #2
	ldr	r3, .L527+12
	bl	vlog
.L526:
	mov	r0, r6
	movs	r5, #1
	bl	mpi_obj_unref
	b	.L501
.L499:
	bl	mpi_queue_pop_obj
	cmp	r0, #0
	beq	.L526
	bl	mpi_obj_unref
	mov	r1, r6
	ldr	r0, [r4, #348]
	bl	mpi_queue_push_obj
	cbnz	r0, .L510
	movw	r3, #507
	ldr	r2, .L527+24
	str	r3, [sp]
	movs	r1, #2
	ldr	r3, .L527+12
	movs	r5, #3
	bl	vlog
	mov	r0, r6
	bl	mpi_obj_unref
	b	.L501
.L510:
	movs	r5, #2
	b	.L501
.L507:
	movs	r5, #0
.L495:
	movs	r2, #0
	mov	r1, r6
	mov	r0, r4
	bl	add_user_to_buf
	ldr	r3, [r4, #44]
	movs	r1, #1
	mov	r2, r6
	ldr	r3, [r3, #80]
	blx	r3
	subs	r1, r0, #0
	it	lt
	orrlt	r5, r5, #4
	b	.L504
.L508:
	mov	r5, r7
	b	.L495
.L528:
	.align	2
.L527:
	.word	.LC23
	.word	.LC22
	.word	.LC24
	.word	.LANCHOR0+408
	.word	274877907
	.word	1000000
	.word	.LC25
	.fnend
	.size	mpi_node_buffer_in, .-mpi_node_buffer_in
	.align	1
	.global	mpi_node_get_in_buffer
	.syntax unified
	.thumb
	.thumb_func
	.fpu softvfp
	.type	mpi_node_get_in_buffer, %function
mpi_node_get_in_buffer:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, r5, r6, r7, lr}
	.save {r4, r5, r6, r7, lr}
	mov	r4, r0
	.pad #28
	sub	sp, sp, #28
	mov	r6, r1
	cbz	r0, .L530
	ldr	r3, [r0, #12]
	and	r3, r3, #6
	cmp	r3, #2
	beq	.L531
.L530:
	movs	r5, #0
.L529:
	mov	r0, r5
	add	sp, sp, #28
	@ sp needed
	pop	{r4, r5, r6, r7, pc}
.L531:
	bl	mpi_obj_ref
	cbz	r6, .L533
.L540:
	.syntax unified
@ 29 "./arch/arm/include/asm/irqflags.h" 1
		mrs	r2, cpsr	@ arch_local_irq_save
	cpsid	i
@ 0 "" 2
	.thumb
	.syntax unified
	ldr	r5, [r4, #12]
	add	r0, r4, #356
	ldr	r3, .L549
	ands	r5, r5, #4096
	bne	.L534
	.syntax unified
@ 171 "./arch/arm/include/asm/irqflags.h" 1
		msr	cpsr_c, r2	@ local_irq_restore
@ 0 "" 2
	.thumb
	.syntax unified
	ldr	r2, [r4, #380]
	str	r5, [r4, #356]
	umull	r2, r3, r2, r3
	lsrs	r1, r3, #3
	bl	wait_for_completion_interruptible_timeout
.L535:
	mov	r0, r4
	bl	mpi_obj_unref
	b	.L529
.L534:
	movs	r1, #0
	str	r1, [r4, #356]
	.syntax unified
@ 171 "./arch/arm/include/asm/irqflags.h" 1
		msr	cpsr_c, r2	@ local_irq_restore
@ 0 "" 2
	.thumb
	.syntax unified
	ldr	r2, [r4, #380]
	movs	r6, #1
	umull	r2, r3, r2, r3
	lsrs	r1, r3, #3
	bl	wait_for_completion_interruptible_timeout
.L533:
	.syntax unified
@ 29 "./arch/arm/include/asm/irqflags.h" 1
		mrs	r7, cpsr	@ arch_local_irq_save
	cpsid	i
@ 0 "" 2
	.thumb
	.syntax unified
	ldr	r3, [r4, #324]
	cbnz	r3, .L536
.L539:
	movs	r5, #0
.L537:
	.syntax unified
@ 171 "./arch/arm/include/asm/irqflags.h" 1
		msr	cpsr_c, r7	@ local_irq_restore
@ 0 "" 2
	.thumb
	.syntax unified
	movs	r2, #1
	mov	r1, r5
	mov	r0, r4
	bl	add_user_to_buf
	b	.L535
.L536:
	ldr	r0, [r4, #348]
	bl	mpi_queue_pop_obj
	mov	r5, r0
	cbnz	r0, .L538
	cmp	r6, #0
	bne	.L539
	.syntax unified
@ 171 "./arch/arm/include/asm/irqflags.h" 1
		msr	cpsr_c, r7	@ local_irq_restore
@ 0 "" 2
	.thumb
	.syntax unified
	b	.L540
.L538:
	ldr	r3, [r4, #44]
	ldr	r0, .L549+4
	ldr	r1, .L549+8
	ldr	r3, [r3, #44]
	cmp	r6, #0
	it	eq
	moveq	r1, r0
	ldr	r2, [r4]
	ldr	r0, [r5]
	strd	r3, r2, [sp, #4]
	movw	r3, #657
	strd	r1, r0, [sp, #12]
	movs	r1, #5
	str	r3, [sp]
	movs	r0, #0
	ldr	r3, .L549+12
	ldr	r2, .L549+16
	bl	vlog
	b	.L537
.L550:
	.align	2
.L549:
	.word	-858993459
	.word	.LC27
	.word	.LC26
	.word	.LANCHOR0+427
	.word	.LC28
	.fnend
	.size	mpi_node_get_in_buffer, .-mpi_node_get_in_buffer
	.align	1
	.global	mpi_node_pick_in_buffer
	.syntax unified
	.thumb
	.thumb_func
	.fpu softvfp
	.type	mpi_node_pick_in_buffer, %function
mpi_node_pick_in_buffer:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r3, r4, r5, lr}
	.save {r3, r4, r5, lr}
	movs	r1, #1
	mov	r4, r0
	bl	mpi_node_add_in_watcher
	movs	r1, #1
	mov	r0, r4
	bl	mpi_node_get_in_buffer
	mov	r5, r0
	mov	r0, r4
	bl	mpi_node_del_in_watcher
	mov	r0, r5
	pop	{r3, r4, r5, pc}
	.fnend
	.size	mpi_node_pick_in_buffer, .-mpi_node_pick_in_buffer
	.align	1
	.global	mpi_node_get_out_buffer
	.syntax unified
	.thumb
	.thumb_func
	.fpu softvfp
	.type	mpi_node_get_out_buffer, %function
mpi_node_get_out_buffer:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, r5, r6, r7, lr}
	.save {r4, r5, r6, r7, lr}
	mov	r4, r0
	.pad #28
	sub	sp, sp, #28
	mov	r6, r1
	cbz	r0, .L553
	ldr	r3, [r0, #12]
	and	r3, r3, #6
	cmp	r3, #2
	beq	.L554
.L553:
	movs	r5, #0
.L552:
	mov	r0, r5
	add	sp, sp, #28
	@ sp needed
	pop	{r4, r5, r6, r7, pc}
.L554:
	bl	mpi_obj_ref
	cbz	r6, .L556
.L563:
	.syntax unified
@ 29 "./arch/arm/include/asm/irqflags.h" 1
		mrs	r2, cpsr	@ arch_local_irq_save
	cpsid	i
@ 0 "" 2
	.thumb
	.syntax unified
	ldr	r5, [r4, #12]
	add	r0, r4, #368
	ldr	r3, .L572
	ands	r5, r5, #4096
	bne	.L557
	.syntax unified
@ 171 "./arch/arm/include/asm/irqflags.h" 1
		msr	cpsr_c, r2	@ local_irq_restore
@ 0 "" 2
	.thumb
	.syntax unified
	ldr	r2, [r4, #384]
	str	r5, [r4, #368]
	umull	r2, r3, r2, r3
	lsrs	r1, r3, #3
	bl	wait_for_completion_interruptible_timeout
.L558:
	mov	r0, r4
	bl	mpi_obj_unref
	b	.L552
.L557:
	movs	r1, #0
	str	r1, [r4, #368]
	.syntax unified
@ 171 "./arch/arm/include/asm/irqflags.h" 1
		msr	cpsr_c, r2	@ local_irq_restore
@ 0 "" 2
	.thumb
	.syntax unified
	ldr	r2, [r4, #384]
	movs	r6, #1
	umull	r2, r3, r2, r3
	lsrs	r1, r3, #3
	bl	wait_for_completion_interruptible_timeout
.L556:
	.syntax unified
@ 29 "./arch/arm/include/asm/irqflags.h" 1
		mrs	r7, cpsr	@ arch_local_irq_save
	cpsid	i
@ 0 "" 2
	.thumb
	.syntax unified
	ldr	r3, [r4, #336]
	cbnz	r3, .L559
.L562:
	movs	r5, #0
.L560:
	.syntax unified
@ 171 "./arch/arm/include/asm/irqflags.h" 1
		msr	cpsr_c, r7	@ local_irq_restore
@ 0 "" 2
	.thumb
	.syntax unified
	movs	r2, #1
	mov	r1, r5
	mov	r0, r4
	bl	add_user_to_buf
	b	.L558
.L559:
	ldr	r0, [r4, #352]
	bl	mpi_queue_pop_obj
	mov	r5, r0
	cbnz	r0, .L561
	cmp	r6, #0
	bne	.L562
	.syntax unified
@ 171 "./arch/arm/include/asm/irqflags.h" 1
		msr	cpsr_c, r7	@ local_irq_restore
@ 0 "" 2
	.thumb
	.syntax unified
	b	.L563
.L561:
	ldr	r3, [r4, #44]
	ldr	r0, .L572+4
	ldr	r1, .L572+8
	ldr	r3, [r3, #44]
	cmp	r6, #0
	it	eq
	moveq	r1, r0
	ldr	r2, [r4]
	ldr	r0, [r5]
	strd	r3, r2, [sp, #4]
	movw	r3, #710
	strd	r1, r0, [sp, #12]
	movs	r1, #5
	str	r3, [sp]
	movs	r0, #0
	ldr	r3, .L572+12
	ldr	r2, .L572+16
	bl	vlog
	b	.L560
.L573:
	.align	2
.L572:
	.word	-858993459
	.word	.LC23
	.word	.LC26
	.word	.LANCHOR0+450
	.word	.LC29
	.fnend
	.size	mpi_node_get_out_buffer, .-mpi_node_get_out_buffer
	.align	1
	.global	mpi_node_pick_out_buffer
	.syntax unified
	.thumb
	.thumb_func
	.fpu softvfp
	.type	mpi_node_pick_out_buffer, %function
mpi_node_pick_out_buffer:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r3, r4, r5, lr}
	.save {r3, r4, r5, lr}
	movs	r1, #1
	mov	r4, r0
	bl	mpi_node_add_out_watcher
	movs	r1, #1
	mov	r0, r4
	bl	mpi_node_get_out_buffer
	mov	r5, r0
	mov	r0, r4
	bl	mpi_node_del_out_watcher
	mov	r0, r5
	pop	{r3, r4, r5, pc}
	.fnend
	.size	mpi_node_pick_out_buffer, .-mpi_node_pick_out_buffer
	.align	1
	.global	mpi_node_request_buf
	.syntax unified
	.thumb
	.thumb_func
	.fpu softvfp
	.type	mpi_node_request_buf, %function
mpi_node_request_buf:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, r5, r6, lr}
	.save {r4, r5, r6, lr}
	mov	r4, r0
	.pad #24
	sub	sp, sp, #24
	mov	r5, r1
	ldr	r6, [r0, #60]
	cbz	r0, .L576
	ldr	r3, [r0, #12]
	and	r3, r3, #6
	cmp	r3, #2
	beq	.L577
.L576:
	movs	r5, #0
.L575:
	mov	r0, r5
	add	sp, sp, #24
	@ sp needed
	pop	{r4, r5, r6, pc}
.L577:
	ldr	r3, [r0, #44]
	ldr	r1, [r0]
	ldr	r2, [r3, #44]
	cbz	r5, .L581
	ldr	r3, [r5]
.L579:
	strd	r1, r3, [sp, #8]
	movs	r0, #0
	str	r2, [sp, #4]
	mov	r3, #736
	ldr	r2, .L588
	movs	r1, #5
	str	r3, [sp]
	ldr	r3, .L588+4
	bl	vlog
	mov	r1, r5
	mov	r0, r6
	bl	mpi_buf_pool_request_buf
	mov	r5, r0
	cbz	r0, .L580
	ldr	r3, [r6]
	movs	r1, #5
	ldr	r2, .L588+8
	str	r3, [sp, #16]
	ldr	r3, [r0]
	movs	r0, #0
	str	r3, [sp, #12]
	ldr	r3, [r4]
	str	r3, [sp, #8]
	ldr	r3, [r4, #44]
	ldr	r3, [r3, #44]
	str	r3, [sp, #4]
	movw	r3, #742
	str	r3, [sp]
	ldr	r3, .L588+4
	bl	vlog
	ldr	r3, [r6, #64]
	str	r3, [r4, #72]
.L580:
	movs	r2, #0
	mov	r1, r5
	mov	r0, r4
	bl	add_user_to_buf
	b	.L575
.L581:
	mov	r3, #-1
	b	.L579
.L589:
	.align	2
.L588:
	.word	.LC30
	.word	.LANCHOR0+474
	.word	.LC31
	.fnend
	.size	mpi_node_request_buf, .-mpi_node_request_buf
	.align	1
	.global	remove_user_from_buf
	.syntax unified
	.thumb
	.thumb_func
	.fpu softvfp
	.type	remove_user_from_buf, %function
remove_user_from_buf:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	cbz	r1, .L590
	cmp	r0, #0
	blt	.L590
	cmp	r2, #0
	mov	r2, #0
	ite	ne
	movne	r3, #16
	moveq	r3, #0
	add	r3, r3, r0
	adds	r3, r3, #112
	add	r3, r1, r3, lsl #2
	str	r2, [r3, #4]
.L590:
	bx	lr
	.fnend
	.size	remove_user_from_buf, .-remove_user_from_buf
	.align	1
	.global	mpi_node_release_buffer_flag
	.syntax unified
	.thumb
	.thumb_func
	.fpu softvfp
	.type	mpi_node_release_buffer_flag, %function
mpi_node_release_buffer_flag:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r3, r4, r5, r6, r7, lr}
	.save {r3, r4, r5, r6, r7, lr}
	mov	r4, r0
	mov	r6, r1
	mov	r5, r2
	cbz	r0, .L598
	ldr	r3, [r0, #12]
	and	r3, r3, #6
	cmp	r3, #2
	beq	.L599
.L598:
	pop	{r3, r4, r5, r6, r7, pc}
.L599:
	bl	mpi_obj_ref
	.syntax unified
@ 29 "./arch/arm/include/asm/irqflags.h" 1
		mrs	r7, cpsr	@ arch_local_irq_save
	cpsid	i
@ 0 "" 2
	.thumb
	.syntax unified
	movs	r2, #1
	ldr	r0, [r4, #76]
	mov	r1, r6
	bl	remove_user_from_buf
	mov	r0, r6
	bl	mpi_obj_unref
	cbz	r5, .L601
	ldr	r3, [r5]
	subs	r3, r3, #1
	str	r3, [r5]
.L601:
	.syntax unified
@ 171 "./arch/arm/include/asm/irqflags.h" 1
		msr	cpsr_c, r7	@ local_irq_restore
@ 0 "" 2
	.thumb
	.syntax unified
	mov	r0, r4
	pop	{r3, r4, r5, r6, r7, lr}
	b	mpi_obj_unref
	.fnend
	.size	mpi_node_release_buffer_flag, .-mpi_node_release_buffer_flag
	.align	1
	.global	mpi_node_buffer_out
	.syntax unified
	.thumb
	.thumb_func
	.fpu softvfp
	.type	mpi_node_buffer_out, %function
mpi_node_buffer_out:
	.fnstart
	@ args = 0, pretend = 0, frame = 32
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, r5, r6, r7, r8, lr}
	.save {r4, r5, r6, r7, r8, lr}
	mov	r4, r0
	.pad #56
	sub	sp, sp, #56
	mov	r6, r1
	mov	r5, r2
	cbz	r0, .L610
	ldr	r3, [r0, #12]
	and	r3, r3, #6
	cmp	r3, #2
	beq	.L611
.L610:
	movs	r5, #32
.L609:
	mov	r0, r5
	add	sp, sp, #56
	@ sp needed
	pop	{r4, r5, r6, r7, r8, pc}
.L611:
	add	r0, r0, #264
	bl	ktime_get_ts64
	mov	r0, r4
	bl	mpi_obj_ref
	ldr	r3, [r4, #44]
	ldr	r0, [r6]
	ldr	r1, [r4]
	ldr	r2, [r3, #44]
	ldr	r7, .L654
	ldr	r3, .L654+4
	strd	r2, r1, [sp, #4]
	movs	r1, #5
	cmp	r5, #0
	it	eq
	moveq	r3, r7
	ldr	r2, .L654+8
	strd	r0, r3, [sp, #12]
	movw	r3, #557
	movs	r0, #0
	str	r3, [sp]
	ldr	r3, .L654+12
	bl	vlog
	ldr	r1, [r4, #204]
	cbz	r1, .L614
	ldr	r3, [r4, #208]
	cmp	r3, #0
	ble	.L615
	subs	r3, r3, #1
	str	r3, [r4, #208]
.L616:
	mov	r0, r4
	movs	r5, #0
	bl	count_frame_rate.constprop.25
	b	.L626
.L615:
	ldr	r0, [r4, #184]
	bl	__aeabi_idivmod
	add	r1, r1, r4
	ldrb	r3, [r1, #212]	@ zero_extendqisi2
	cmp	r3, #0
	bne	.L616
.L614:
	cmp	r5, #0
	bne	.L631
	ldr	r3, [r4, #336]
	cbnz	r3, .L618
	ldr	r3, [r4, #340]
	cmp	r3, #0
	beq	.L617
.L618:
	.syntax unified
@ 29 "./arch/arm/include/asm/irqflags.h" 1
		mrs	r7, cpsr	@ arch_local_irq_save
	cpsid	i
@ 0 "" 2
	.thumb
	.syntax unified
	ldr	r5, [r4, #336]
	cbz	r5, .L619
	cbz	r6, .L620
	mov	r0, r6
	bl	mpi_obj_ref
.L620:
	ldr	r2, [r4, #400]
	ldr	r3, [r4, #392]
	ldr	r0, [r4, #352]
	cmp	r2, r3
	bcs	.L621
	mov	r1, r6
	bl	mpi_queue_push_obj
	cmp	r0, #0
	beq	.L622
	ldr	r3, [r4, #400]
	movs	r5, #0
	adds	r3, r3, #1
	str	r3, [r4, #400]
.L623:
	add	r0, r4, #368
	bl	complete_all
	.syntax unified
@ 171 "./arch/arm/include/asm/irqflags.h" 1
		msr	cpsr_c, r7	@ local_irq_restore
@ 0 "" 2
	.thumb
	.syntax unified
.L619:
	ldr	r3, [r4, #340]
	cmp	r3, #0
	beq	.L617
	ldr	r3, [r4, #344]
	cbz	r3, .L625
	mov	r1, r6
	mov	r0, r4
	blx	r3
.L625:
	mov	r0, r4
	bl	count_frame_rate.constprop.25
.L626:
	add	r0, sp, #24
	bl	ktime_get_ts64
	ldr	r1, [r4, #272]
	ldrd	r2, r3, [r4, #264]
	ldr	r0, [sp, #32]
	ldr	r6, [sp, #24]
	subs	r0, r0, r1
	subs	r2, r6, r2
	asr	r1, r0, #31
	strd	r0, [sp]
	ldr	r1, [sp, #28]
	add	r0, sp, #40
	sbc	r3, r1, r3
	bl	set_normalized_timespec64
	ldr	r0, .L654+16
	ldr	r3, [sp, #48]
	ldr	r2, [sp, #40]
	smull	r0, r1, r3, r0
	asrs	r3, r3, #31
	mov	r0, r4
	rsb	r3, r3, r1, asr #6
	ldr	r1, .L654+20
	mla	r3, r1, r2, r3
	str	r3, [r4, #284]
	bl	mpi_obj_unref
	b	.L609
.L622:
	mov	r3, #568
	ldr	r2, .L654+24
	str	r3, [sp]
	movs	r1, #2
	ldr	r3, .L654+12
	bl	vlog
.L653:
	mov	r0, r6
	movs	r5, #1
	bl	mpi_obj_unref
	b	.L623
.L621:
	bl	mpi_queue_pop_obj
	cmp	r0, #0
	beq	.L653
	bl	mpi_obj_unref
	mov	r1, r6
	ldr	r0, [r4, #352]
	bl	mpi_queue_push_obj
	cbnz	r0, .L634
	movw	r3, #583
	ldr	r2, .L654+24
	str	r3, [sp]
	movs	r1, #2
	ldr	r3, .L654+12
	movs	r5, #3
	bl	vlog
	mov	r0, r6
	bl	mpi_obj_unref
	b	.L623
.L634:
	movs	r5, #2
	b	.L623
.L631:
	movs	r5, #0
.L617:
	movs	r2, #0
	mov	r1, r6
	ldr	r0, [r4, #76]
	add	r8, r4, #300
	bl	remove_user_from_buf
	mov	r0, r4
	bl	count_frame_rate.constprop.25
	ldr	r7, [r4, #300]
	subs	r7, r7, #4
.L627:
	adds	r3, r7, #4
	cmp	r3, r8
	beq	.L626
	movs	r2, #0
	mov	r1, r6
	ldr	r0, [r7]
	bl	mpi_node_buffer_in
	cbz	r0, .L628
	orr	r5, r5, #16
.L628:
	ldr	r7, [r7, #4]
	subs	r7, r7, #4
	b	.L627
.L655:
	.align	2
.L654:
	.word	.LC23
	.word	.LC22
	.word	.LC32
	.word	.LANCHOR0+495
	.word	274877907
	.word	1000000
	.word	.LC33
	.fnend
	.size	mpi_node_buffer_out, .-mpi_node_buffer_out
	.align	1
	.global	mpi_node_buffer_available
	.syntax unified
	.thumb
	.thumb_func
	.fpu softvfp
	.type	mpi_node_buffer_available, %function
mpi_node_buffer_available:
	.fnstart
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	.save {r4, r5, r6, lr}
	.pad #16
	mov	r4, r0
	mov	r5, r1
	ldr	r6, [r0, #44]
	cbz	r0, .L657
	ldr	r3, [r0, #12]
	and	r3, r3, #6
	cmp	r3, #2
	beq	.L658
.L657:
	add	sp, sp, #16
	@ sp needed
	pop	{r4, r5, r6, pc}
.L658:
	bl	mpi_obj_ref
	ldr	r3, [r4, #12]
	lsls	r3, r3, #19
	bpl	.L661
	ldr	r3, [r4]
	movs	r1, #5
	ldr	r2, .L670
	movs	r0, #0
	str	r3, [sp, #12]
	ldr	r3, [r4, #44]
	ldr	r3, [r3, #44]
	str	r3, [sp, #8]
	ldr	r3, [r5]
	str	r3, [sp, #4]
	movw	r3, #453
	str	r3, [sp]
	ldr	r3, .L670+4
	bl	vlog
	ldr	r3, [r6, #80]
	cbz	r3, .L661
	mov	r2, r5
	movs	r1, #0
	mov	r0, r4
	blx	r3
.L661:
	mov	r0, r4
	add	sp, sp, #16
	@ sp needed
	pop	{r4, r5, r6, lr}
	b	mpi_obj_unref
.L671:
	.align	2
.L670:
	.word	.LC34
	.word	.LANCHOR0+515
	.fnend
	.size	mpi_node_buffer_available, .-mpi_node_buffer_available
	.section	.rodata
	.set	.LANCHOR0,. + 0
	.type	__func__.37756, %object
	.size	__func__.37756, 18
__func__.37756:
	.ascii	"mpi_node_streamon\000"
	.type	__func__.37771, %object
	.size	__func__.37771, 19
__func__.37771:
	.ascii	"mpi_node_streamoff\000"
	.type	__func__.38021, %object
	.size	__func__.38021, 15
__func__.38021:
	.ascii	"mpi_node_flush\000"
	.type	__func__.38049, %object
	.size	__func__.38049, 16
__func__.38049:
	.ascii	"mpi_node_unbind\000"
	.type	__func__.38075, %object
	.size	__func__.38075, 14
__func__.38075:
	.ascii	"mpi_node_bind\000"
	.type	__func__.38334, %object
	.size	__func__.38334, 17
__func__.38334:
	.ascii	"mpi_dev_register\000"
	.type	__func__.37519, %object
	.size	__func__.37519, 24
__func__.37519:
	.ascii	"mpi_node_add_in_watcher\000"
	.type	__func__.37533, %object
	.size	__func__.37533, 23
__func__.37533:
	.ascii	"mpi_node_add_in_filter\000"
	.type	__func__.37547, %object
	.size	__func__.37547, 25
__func__.37547:
	.ascii	"mpi_node_add_out_watcher\000"
	.type	__func__.37561, %object
	.size	__func__.37561, 24
__func__.37561:
	.ascii	"mpi_node_add_out_filter\000"
	.type	__func__.37573, %object
	.size	__func__.37573, 24
__func__.37573:
	.ascii	"mpi_node_del_in_watcher\000"
	.type	__func__.37581, %object
	.size	__func__.37581, 23
__func__.37581:
	.ascii	"mpi_node_del_in_filter\000"
	.type	__func__.37589, %object
	.size	__func__.37589, 25
__func__.37589:
	.ascii	"mpi_node_del_out_watcher\000"
	.type	__func__.37597, %object
	.size	__func__.37597, 24
__func__.37597:
	.ascii	"mpi_node_del_out_filter\000"
	.type	__func__.38196, %object
	.size	__func__.38196, 20
__func__.38196:
	.ascii	"mpi_dev_request_job\000"
	.type	__func__.38210, %object
	.size	__func__.38210, 29
__func__.38210:
	.ascii	"mpi_dev_request_job_for_node\000"
	.type	__func__.38104, %object
	.size	__func__.38104, 17
__func__.38104:
	.ascii	"mpi_node_destroy\000"
	.type	__func__.38183, %object
	.size	__func__.38183, 32
__func__.38183:
	.ascii	"mpi_dev_create_node_with_params\000"
	.type	__func__.38295, %object
	.size	__func__.38295, 19
__func__.38295:
	.ascii	"mpi_dev_unregister\000"
	.type	__func__.37820, %object
	.size	__func__.37820, 19
__func__.37820:
	.ascii	"mpi_node_buffer_in\000"
	.type	__func__.37951, %object
	.size	__func__.37951, 23
__func__.37951:
	.ascii	"mpi_node_get_in_buffer\000"
	.type	__func__.37988, %object
	.size	__func__.37988, 24
__func__.37988:
	.ascii	"mpi_node_get_out_buffer\000"
	.type	__func__.38002, %object
	.size	__func__.38002, 21
__func__.38002:
	.ascii	"mpi_node_request_buf\000"
	.type	__func__.37856, %object
	.size	__func__.37856, 20
__func__.37856:
	.ascii	"mpi_node_buffer_out\000"
	.type	__func__.37804, %object
	.size	__func__.37804, 26
__func__.37804:
	.ascii	"mpi_node_buffer_available\000"
	.data
	.align	2
	.type	___modver_attr, %object
	.size	___modver_attr, 36
___modver_attr:
	.word	.LC35
	.short	292
	.space	2
	.word	__modver_version_show
	.space	16
	.word	.LC36
	.word	.LC37
	.bss
	.set	.LANCHOR1,. + 0
	.type	__key.10574, %object
	.size	__key.10574, 0
__key.10574:
	.section	.modinfo,"a"
	.type	__UNIQUE_ID_version257, %object
	.size	__UNIQUE_ID_version257, 19
__UNIQUE_ID_version257:
	.ascii	"rockit.version=0.1\000"
	.type	__UNIQUE_ID_license256, %object
	.size	__UNIQUE_ID_license256, 19
__UNIQUE_ID_license256:
	.ascii	"rockit.license=GPL\000"
	.type	__UNIQUE_ID_file255, %object
	.size	__UNIQUE_ID_file255, 37
__UNIQUE_ID_file255:
	.ascii	"rockit.file=drivers/rockit-ko/rockit\000"
	.type	__UNIQUE_ID_author254, %object
	.size	__UNIQUE_ID_author254, 23
__UNIQUE_ID_author254:
	.ascii	"rockit.author=Rockchip\000"
	.section	.rodata.str1.1,"aMS",%progbits,1
.LC0:
	.ascii	"\033[1;32mnode(%s-%d) stream on\033[0m\000"
.LC1:
	.ascii	"\033[1;32mhandle_message: MPI_EVENT_STREAM_ON\033[0"
	.ascii	"m\000"
.LC2:
	.ascii	"node(%s-%d) stream off\000"
.LC3:
	.ascii	"node(%s-%d) flushing\000"
.LC4:
	.ascii	"unbinding source(%s-%d) sink(%s-%d)\000"
.LC5:
	.ascii	"bind source(%s-%d) sink(%s-%d)\000"
.LC6:
	.ascii	"&x->wait\000"
.LC7:
	.ascii	"device(%s) registered\000"
.LC8:
	.ascii	"node(%s-%d) add in watcherdepth(%d)\000"
.LC9:
	.ascii	"node(%s-%d) add in filterdepth(%d)\000"
.LC10:
	.ascii	"node(%s-%d) add out watcherdepth(%d)\000"
.LC11:
	.ascii	"node(%s-%d) add out filterdepth(%d)\000"
.LC12:
	.ascii	"node(%s-%d) del in watcher\000"
.LC13:
	.ascii	"node(%s-%d) del in filter\000"
.LC14:
	.ascii	"node(%s-%d) del out watcher\000"
.LC15:
	.ascii	"node(%s-%d) del out filter\000"
.LC16:
	.ascii	"device(%s) request job\000"
.LC17:
	.ascii	"device(%s) request job for node %d\000"
.LC18:
	.ascii	"node(%s-%d) destroying\000"
.LC19:
	.ascii	"node buf user id error = %d\000"
.LC20:
	.ascii	"node(%s-%d) created\000"
.LC21:
	.ascii	"device(%s) unregistering\000"
.LC22:
	.ascii	" injected\000"
.LC23:
	.ascii	"\000"
.LC24:
	.ascii	"node(%s-%d) input buf(%d)%s\000"
.LC25:
	.ascii	"\033[1;31mpush in buf queue fail\033[0m\000"
.LC26:
	.ascii	" next\000"
.LC27:
	.ascii	"current\000"
.LC28:
	.ascii	"node(%s-%d) got%s input buf(%d)\000"
.LC29:
	.ascii	"node(%s-%d) got%s output buf(%d)\000"
.LC30:
	.ascii	"node(%s-%d) request buf(%d)\000"
.LC31:
	.ascii	"node(%s-%d) got buf(%d) from pool(%d)\000"
.LC32:
	.ascii	"node(%s-%d) output buf(%d)%s\000"
.LC33:
	.ascii	"\033[1;31mpush out buf queue fail\033[0m\000"
.LC34:
	.ascii	"buf(%d) available for node(%s-%d)\000"
.LC35:
	.ascii	"version\000"
.LC36:
	.ascii	"rockit\000"
.LC37:
	.ascii	"0.1\000"
	.section	___ksymtab_gpl+mpi_dev_create_node_with_params,"a"
	.align	2
	.type	__ksymtab_mpi_dev_create_node_with_params, %object
	.size	__ksymtab_mpi_dev_create_node_with_params, 12
__ksymtab_mpi_dev_create_node_with_params:
	.word	mpi_dev_create_node_with_params
	.word	__kstrtab_mpi_dev_create_node_with_params
	.word	__kstrtabns_mpi_dev_create_node_with_params
	.section	___ksymtab_gpl+mpi_dev_register,"a"
	.align	2
	.type	__ksymtab_mpi_dev_register, %object
	.size	__ksymtab_mpi_dev_register, 12
__ksymtab_mpi_dev_register:
	.word	mpi_dev_register
	.word	__kstrtab_mpi_dev_register
	.word	__kstrtabns_mpi_dev_register
	.section	___ksymtab_gpl+mpi_dev_request_job,"a"
	.align	2
	.type	__ksymtab_mpi_dev_request_job, %object
	.size	__ksymtab_mpi_dev_request_job, 12
__ksymtab_mpi_dev_request_job:
	.word	mpi_dev_request_job
	.word	__kstrtab_mpi_dev_request_job
	.word	__kstrtabns_mpi_dev_request_job
	.section	___ksymtab_gpl+mpi_dev_request_job_for_node,"a"
	.align	2
	.type	__ksymtab_mpi_dev_request_job_for_node, %object
	.size	__ksymtab_mpi_dev_request_job_for_node, 12
__ksymtab_mpi_dev_request_job_for_node:
	.word	mpi_dev_request_job_for_node
	.word	__kstrtab_mpi_dev_request_job_for_node
	.word	__kstrtabns_mpi_dev_request_job_for_node
	.section	___ksymtab_gpl+mpi_dev_run_job,"a"
	.align	2
	.type	__ksymtab_mpi_dev_run_job, %object
	.size	__ksymtab_mpi_dev_run_job, 12
__ksymtab_mpi_dev_run_job:
	.word	mpi_dev_run_job
	.word	__kstrtab_mpi_dev_run_job
	.word	__kstrtabns_mpi_dev_run_job
	.section	___ksymtab_gpl+mpi_dev_unregister,"a"
	.align	2
	.type	__ksymtab_mpi_dev_unregister, %object
	.size	__ksymtab_mpi_dev_unregister, 12
__ksymtab_mpi_dev_unregister:
	.word	mpi_dev_unregister
	.word	__kstrtab_mpi_dev_unregister
	.word	__kstrtabns_mpi_dev_unregister
	.section	___ksymtab_gpl+mpi_node_add_in_filter,"a"
	.align	2
	.type	__ksymtab_mpi_node_add_in_filter, %object
	.size	__ksymtab_mpi_node_add_in_filter, 12
__ksymtab_mpi_node_add_in_filter:
	.word	mpi_node_add_in_filter
	.word	__kstrtab_mpi_node_add_in_filter
	.word	__kstrtabns_mpi_node_add_in_filter
	.section	___ksymtab_gpl+mpi_node_add_in_watcher,"a"
	.align	2
	.type	__ksymtab_mpi_node_add_in_watcher, %object
	.size	__ksymtab_mpi_node_add_in_watcher, 12
__ksymtab_mpi_node_add_in_watcher:
	.word	mpi_node_add_in_watcher
	.word	__kstrtab_mpi_node_add_in_watcher
	.word	__kstrtabns_mpi_node_add_in_watcher
	.section	___ksymtab_gpl+mpi_node_add_out_filter,"a"
	.align	2
	.type	__ksymtab_mpi_node_add_out_filter, %object
	.size	__ksymtab_mpi_node_add_out_filter, 12
__ksymtab_mpi_node_add_out_filter:
	.word	mpi_node_add_out_filter
	.word	__kstrtab_mpi_node_add_out_filter
	.word	__kstrtabns_mpi_node_add_out_filter
	.section	___ksymtab_gpl+mpi_node_add_out_watcher,"a"
	.align	2
	.type	__ksymtab_mpi_node_add_out_watcher, %object
	.size	__ksymtab_mpi_node_add_out_watcher, 12
__ksymtab_mpi_node_add_out_watcher:
	.word	mpi_node_add_out_watcher
	.word	__kstrtab_mpi_node_add_out_watcher
	.word	__kstrtabns_mpi_node_add_out_watcher
	.section	___ksymtab_gpl+mpi_node_bind,"a"
	.align	2
	.type	__ksymtab_mpi_node_bind, %object
	.size	__ksymtab_mpi_node_bind, 12
__ksymtab_mpi_node_bind:
	.word	mpi_node_bind
	.word	__kstrtab_mpi_node_bind
	.word	__kstrtabns_mpi_node_bind
	.section	___ksymtab_gpl+mpi_node_buffer_in,"a"
	.align	2
	.type	__ksymtab_mpi_node_buffer_in, %object
	.size	__ksymtab_mpi_node_buffer_in, 12
__ksymtab_mpi_node_buffer_in:
	.word	mpi_node_buffer_in
	.word	__kstrtab_mpi_node_buffer_in
	.word	__kstrtabns_mpi_node_buffer_in
	.section	___ksymtab_gpl+mpi_node_buffer_out,"a"
	.align	2
	.type	__ksymtab_mpi_node_buffer_out, %object
	.size	__ksymtab_mpi_node_buffer_out, 12
__ksymtab_mpi_node_buffer_out:
	.word	mpi_node_buffer_out
	.word	__kstrtab_mpi_node_buffer_out
	.word	__kstrtabns_mpi_node_buffer_out
	.section	___ksymtab_gpl+mpi_node_del_in_filter,"a"
	.align	2
	.type	__ksymtab_mpi_node_del_in_filter, %object
	.size	__ksymtab_mpi_node_del_in_filter, 12
__ksymtab_mpi_node_del_in_filter:
	.word	mpi_node_del_in_filter
	.word	__kstrtab_mpi_node_del_in_filter
	.word	__kstrtabns_mpi_node_del_in_filter
	.section	___ksymtab_gpl+mpi_node_del_in_watcher,"a"
	.align	2
	.type	__ksymtab_mpi_node_del_in_watcher, %object
	.size	__ksymtab_mpi_node_del_in_watcher, 12
__ksymtab_mpi_node_del_in_watcher:
	.word	mpi_node_del_in_watcher
	.word	__kstrtab_mpi_node_del_in_watcher
	.word	__kstrtabns_mpi_node_del_in_watcher
	.section	___ksymtab_gpl+mpi_node_del_out_filter,"a"
	.align	2
	.type	__ksymtab_mpi_node_del_out_filter, %object
	.size	__ksymtab_mpi_node_del_out_filter, 12
__ksymtab_mpi_node_del_out_filter:
	.word	mpi_node_del_out_filter
	.word	__kstrtab_mpi_node_del_out_filter
	.word	__kstrtabns_mpi_node_del_out_filter
	.section	___ksymtab_gpl+mpi_node_del_out_watcher,"a"
	.align	2
	.type	__ksymtab_mpi_node_del_out_watcher, %object
	.size	__ksymtab_mpi_node_del_out_watcher, 12
__ksymtab_mpi_node_del_out_watcher:
	.word	mpi_node_del_out_watcher
	.word	__kstrtab_mpi_node_del_out_watcher
	.word	__kstrtabns_mpi_node_del_out_watcher
	.section	___ksymtab_gpl+mpi_node_destroy,"a"
	.align	2
	.type	__ksymtab_mpi_node_destroy, %object
	.size	__ksymtab_mpi_node_destroy, 12
__ksymtab_mpi_node_destroy:
	.word	mpi_node_destroy
	.word	__kstrtab_mpi_node_destroy
	.word	__kstrtabns_mpi_node_destroy
	.section	___ksymtab_gpl+mpi_node_enable_auto_streamon,"a"
	.align	2
	.type	__ksymtab_mpi_node_enable_auto_streamon, %object
	.size	__ksymtab_mpi_node_enable_auto_streamon, 12
__ksymtab_mpi_node_enable_auto_streamon:
	.word	mpi_node_enable_auto_streamon
	.word	__kstrtab_mpi_node_enable_auto_streamon
	.word	__kstrtabns_mpi_node_enable_auto_streamon
	.section	___ksymtab_gpl+mpi_node_flush,"a"
	.align	2
	.type	__ksymtab_mpi_node_flush, %object
	.size	__ksymtab_mpi_node_flush, 12
__ksymtab_mpi_node_flush:
	.word	mpi_node_flush
	.word	__kstrtab_mpi_node_flush
	.word	__kstrtabns_mpi_node_flush
	.section	___ksymtab_gpl+mpi_node_force_lost_frame,"a"
	.align	2
	.type	__ksymtab_mpi_node_force_lost_frame, %object
	.size	__ksymtab_mpi_node_force_lost_frame, 12
__ksymtab_mpi_node_force_lost_frame:
	.word	mpi_node_force_lost_frame
	.word	__kstrtab_mpi_node_force_lost_frame
	.word	__kstrtabns_mpi_node_force_lost_frame
	.section	___ksymtab_gpl+mpi_node_get_in_buffer,"a"
	.align	2
	.type	__ksymtab_mpi_node_get_in_buffer, %object
	.size	__ksymtab_mpi_node_get_in_buffer, 12
__ksymtab_mpi_node_get_in_buffer:
	.word	mpi_node_get_in_buffer
	.word	__kstrtab_mpi_node_get_in_buffer
	.word	__kstrtabns_mpi_node_get_in_buffer
	.section	___ksymtab_gpl+mpi_node_get_out_buffer,"a"
	.align	2
	.type	__ksymtab_mpi_node_get_out_buffer, %object
	.size	__ksymtab_mpi_node_get_out_buffer, 12
__ksymtab_mpi_node_get_out_buffer:
	.word	mpi_node_get_out_buffer
	.word	__kstrtab_mpi_node_get_out_buffer
	.word	__kstrtabns_mpi_node_get_out_buffer
	.section	___ksymtab_gpl+mpi_node_pick_in_buffer,"a"
	.align	2
	.type	__ksymtab_mpi_node_pick_in_buffer, %object
	.size	__ksymtab_mpi_node_pick_in_buffer, 12
__ksymtab_mpi_node_pick_in_buffer:
	.word	mpi_node_pick_in_buffer
	.word	__kstrtab_mpi_node_pick_in_buffer
	.word	__kstrtabns_mpi_node_pick_in_buffer
	.section	___ksymtab_gpl+mpi_node_pick_out_buffer,"a"
	.align	2
	.type	__ksymtab_mpi_node_pick_out_buffer, %object
	.size	__ksymtab_mpi_node_pick_out_buffer, 12
__ksymtab_mpi_node_pick_out_buffer:
	.word	mpi_node_pick_out_buffer
	.word	__kstrtab_mpi_node_pick_out_buffer
	.word	__kstrtabns_mpi_node_pick_out_buffer
	.section	___ksymtab_gpl+mpi_node_release_buffer_flag,"a"
	.align	2
	.type	__ksymtab_mpi_node_release_buffer_flag, %object
	.size	__ksymtab_mpi_node_release_buffer_flag, 12
__ksymtab_mpi_node_release_buffer_flag:
	.word	mpi_node_release_buffer_flag
	.word	__kstrtab_mpi_node_release_buffer_flag
	.word	__kstrtabns_mpi_node_release_buffer_flag
	.section	___ksymtab_gpl+mpi_node_request_buf,"a"
	.align	2
	.type	__ksymtab_mpi_node_request_buf, %object
	.size	__ksymtab_mpi_node_request_buf, 12
__ksymtab_mpi_node_request_buf:
	.word	mpi_node_request_buf
	.word	__kstrtab_mpi_node_request_buf
	.word	__kstrtabns_mpi_node_request_buf
	.section	___ksymtab_gpl+mpi_node_set_frame_rate,"a"
	.align	2
	.type	__ksymtab_mpi_node_set_frame_rate, %object
	.size	__ksymtab_mpi_node_set_frame_rate, 12
__ksymtab_mpi_node_set_frame_rate:
	.word	mpi_node_set_frame_rate
	.word	__kstrtab_mpi_node_set_frame_rate
	.word	__kstrtabns_mpi_node_set_frame_rate
	.section	___ksymtab_gpl+mpi_node_set_params,"a"
	.align	2
	.type	__ksymtab_mpi_node_set_params, %object
	.size	__ksymtab_mpi_node_set_params, 12
__ksymtab_mpi_node_set_params:
	.word	mpi_node_set_params
	.word	__kstrtab_mpi_node_set_params
	.word	__kstrtabns_mpi_node_set_params
	.section	___ksymtab_gpl+mpi_node_stream_pause,"a"
	.align	2
	.type	__ksymtab_mpi_node_stream_pause, %object
	.size	__ksymtab_mpi_node_stream_pause, 12
__ksymtab_mpi_node_stream_pause:
	.word	mpi_node_stream_pause
	.word	__kstrtab_mpi_node_stream_pause
	.word	__kstrtabns_mpi_node_stream_pause
	.section	___ksymtab_gpl+mpi_node_streamoff,"a"
	.align	2
	.type	__ksymtab_mpi_node_streamoff, %object
	.size	__ksymtab_mpi_node_streamoff, 12
__ksymtab_mpi_node_streamoff:
	.word	mpi_node_streamoff
	.word	__kstrtab_mpi_node_streamoff
	.word	__kstrtabns_mpi_node_streamoff
	.section	___ksymtab_gpl+mpi_node_streamon,"a"
	.align	2
	.type	__ksymtab_mpi_node_streamon, %object
	.size	__ksymtab_mpi_node_streamon, 12
__ksymtab_mpi_node_streamon:
	.word	mpi_node_streamon
	.word	__kstrtab_mpi_node_streamon
	.word	__kstrtabns_mpi_node_streamon
	.section	___ksymtab_gpl+mpi_node_unbind,"a"
	.align	2
	.type	__ksymtab_mpi_node_unbind, %object
	.size	__ksymtab_mpi_node_unbind, 12
__ksymtab_mpi_node_unbind:
	.word	mpi_node_unbind
	.word	__kstrtab_mpi_node_unbind
	.word	__kstrtabns_mpi_node_unbind
	.section	__modver,"a"
	.align	2
	.type	__modver_attr, %object
	.size	__modver_attr, 4
__modver_attr:
	.word	___modver_attr
	.ident	"GCC: (crosstool-NG 1.24.0) 8.3.0"
	.section	.note.GNU-stack,"",%progbits
